#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // Используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти					
					
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ИмяМетаданных = Метаданные.Имя;
	ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)     
	
	Если ВыбранноеЗначение.Вариант  =  "СтатусОтправления" Тогда 
		Объект.СтатусОтправления = ВыбранноеЗначение.ВыбранноеЗначение ;   
	ИначеЕсли ВыбранноеЗначение.Вариант  =  "Маркетплейс" Тогда 
		Объект.Маркетплейс = ВыбранноеЗначение.ВыбранноеЗначение ;		
	ИначеЕсли ВыбранноеЗначение.Вариант  =  "ВидОперацииЗК" Тогда 
		Объект.ВидОперацииЗК = ВыбранноеЗначение.ВыбранноеЗначение ;  	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЕстьОшибки = ПроверкаТиповРеквизитов();  
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(,"Устраните ошибки перед продолжением!");		
		//Отказ = Истина;
	КонецЕсли;	
	УстановитьОформление(); 
	Объект.ДатаДоставки = ТекущаяДата(); 
	
	Если ЗначениеЗаполнено(Объект.ApiKey) Тогда
		СписокСкладовSelSupНаСервере(); 
		ОбновитьПродуктыSelSupНаСервере();
	КонецЕсли;
	
	//ВосстановитьТЧНаСервере("Организации");    
	//ВосстановитьТЧНаСервере("РасширеннаяНастройкаЗаказов");  
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СохранитьТЧНаСервере("Организации"); 
	СохранитьТЧНаСервере("РасширеннаяНастройкаЗаказов"); 
КонецПроцедуры   

&НаСервере
Процедура СохранитьТЧНаСервере(НазваниеТЧ)
	Объект["ТЧ" + НазваниеТЧ] = ЗначениеВСтрокуВнутр(Объект[НазваниеТЧ].Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТЧНаСервере(НазваниеТЧ)       
	Если ЗначениеЗаполнено(Объект["ТЧ" + НазваниеТЧ]) Тогда
		Объект[НазваниеТЧ].Загрузить(ЗначениеИзСтрокиВнутр(Объект["ТЧ" + НазваниеТЧ])); 	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы   

&НаКлиенте
Процедура СозданыВМаркетплейсеПриИзменении() 
	ИзменитьServicesНаСервере(); 
	ОбновитьПродуктыSelSupНаСервере();   	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_WILDBERRIES()    
	ИзменитьServicesНаСервере("WILDBERRIES");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_OZON() 
	ИзменитьServicesНаСервере("OZON");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_YANDEX_MARKET()     
	ИзменитьServicesНаСервере("YANDEX_MARKET");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_SBER_MEGA_MARKET() 
	ИзменитьServicesНаСервере("SBER_MEGA_MARKET");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_AVITO()  
	ИзменитьServicesНаСервере("AVITO");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_LEROY_MERLIN() 
	ИзменитьServicesНаСервере("LEROY_MERLIN");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_DETMIR() 
	ИзменитьServicesНаСервере("DETMIR");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_KAZAN_EXPRESS() 
	ИзменитьServicesНаСервере("KAZAN_EXPRESS");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_ALIE_EXPRESS() 
	ИзменитьServicesНаСервере("ALIE_EXPRESS");
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьServices_ONE_C() 	
	ИзменитьServicesНаСервере("ONE_C");   
	ОбновитьПродуктыSelSupНаСервере(); 	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьServicesНаСервере(Service = Неопределено) 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");    
	
	nameparam = "";
	Если ОбработкаОбъект.CreatedIn Тогда 
		nameparam = "createdIn"; 
		ОбработкаОбъект.Services = СтрЗаменить(ОбработкаОбъект.Services, "services", "createdIn");
	Иначе
		nameparam = "services"; 
		ОбработкаОбъект.Services = СтрЗаменить(ОбработкаОбъект.Services, "createdIn", "services");
	КонецЕсли; 	 
	
	Если Не Service = Неопределено Тогда  
		
		УдалитьService = ОпределитьАктивностьServiceНаСервере(Service); 
		
		Если УдалитьService Тогда 
			ОбработкаОбъект.Services = СтрЗаменить(ОбработкаОбъект.Services, "&" + nameparam + "[]=" + Service, "");  
		ИначеЕсли СтрНайти(ОбработкаОбъект.Services, Service) = 0 Тогда                                                                
			ОбработкаОбъект.Services = ОбработкаОбъект.Services + "&" + nameparam + "[]=" + Service;  
		КонецЕсли;     
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   

КонецПроцедуры

&НаСервере
Функция ОпределитьАктивностьServiceНаСервере(Service) 
	
	УдалитьService = Ложь;
	Если Service = "ONE_C" Тогда
		Если Элементы.ИзменитьServices_ONE_C.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_ONE_C.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_ONE_C.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли;  
	ИначеЕсли Service = "WILDBERRIES" Тогда
		Если Элементы.ИзменитьServices_WILDBERRIES.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_WILDBERRIES.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_WILDBERRIES.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 
	ИначеЕсли Service = "OZON" Тогда
		Если Элементы.ИзменитьServices_OZON.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_OZON.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_OZON.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 
	ИначеЕсли Service = "YANDEX_MARKET" Тогда
		Если Элементы.ИзменитьServices_YANDEX_MARKET.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_YANDEX_MARKET.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_YANDEX_MARKET.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 
	ИначеЕсли Service = "SBER_MEGA_MARKET" Тогда
		Если Элементы.ИзменитьServices_SBER_MEGA_MARKET.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_SBER_MEGA_MARKET.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_SBER_MEGA_MARKET.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 	
	ИначеЕсли Service = "AVITO" Тогда
		Если Элементы.ИзменитьServices_AVITO.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_AVITO.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_AVITO.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 	
	ИначеЕсли Service = "LEROY_MERLIN" Тогда
		Если Элементы.ИзменитьServices_LEROY_MERLIN.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_LEROY_MERLIN.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_LEROY_MERLIN.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 	
	ИначеЕсли Service = "DETMIR" Тогда
		Если Элементы.ИзменитьServices_DETMIR.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_DETMIR.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_DETMIR.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 	
	ИначеЕсли Service = "KAZAN_EXPRESS" Тогда
		Если Элементы.ИзменитьServices_KAZAN_EXPRESS.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_KAZAN_EXPRESS.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_KAZAN_EXPRESS.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 	
	ИначеЕсли Service = "ALIE_EXPRESS" Тогда
		Если Элементы.ИзменитьServices_ALIE_EXPRESS.ЦветФона = ЦветаСтиля.ЦветАктивности Тогда 
			Элементы.ИзменитьServices_ALIE_EXPRESS.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
			УдалитьService = Истина;
		Иначе                                                               
			Элементы.ИзменитьServices_ALIE_EXPRESS.ЦветФона = ЦветаСтиля.ЦветАктивности; 
		КонецЕсли; 		
	КонецЕсли; 
	
    Возврат УдалитьService;  

КонецФункции

&НаКлиенте
Процедура ИзменитьМаркетплейс_WILDBERRIES()
	ИзменитьМаркетплейсНаКлиенте("WILDBERRIES");
КонецПроцедуры 	 

&НаКлиенте
Процедура ИзменитьМаркетплейс_OZON()
	ИзменитьМаркетплейсНаКлиенте("OZON");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьМаркетплейс_YANDEX_MARKET()
	ИзменитьМаркетплейсНаКлиенте("YANDEX_MARKET");
КонецПроцедуры  

&НаКлиенте
Процедура ИзменитьМаркетплейс_SBER_MEGA_MARKET()
	ИзменитьМаркетплейсНаКлиенте("SBER_MEGA_MARKET");
КонецПроцедуры  

&НаКлиенте
Процедура ИзменитьМаркетплейс_AVITO()
	ИзменитьМаркетплейсНаКлиенте("AVITO");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьМаркетплейс_LEROY_MERLIN()
	ИзменитьМаркетплейсНаКлиенте("LEROY_MERLIN");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьМаркетплейс_DETMIR()
	ИзменитьМаркетплейсНаКлиенте("DETMIR");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМаркетплейс_KAZAN_EXPRESS()
	ИзменитьМаркетплейсНаКлиенте("KAZAN_EXPRESS");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьМаркетплейс_ALIE_EXPRESS()
	ИзменитьМаркетплейсНаКлиенте("ALIE_EXPRESS");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьМаркетплейсНаКлиенте(Маркетплейс) 
	
	//Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) 
	//	ИЛИ Не ЗначениеЗаполнено(Объект.СтатусОтправления) 
	//	ИЛИ Не ЗначениеЗаполнено(Объект.Маркетплейс) Тогда
	//    ПоказатьПредупреждение(,"Заполните обязательные поля на закладке отборы: 'Дата доставки', 'Статус отправления', 'Маркетплейс'!");	
	//Иначе	   		                  
		ИзменитьМаркетплейсНаСервере(Маркетплейс);
		СписокОтправленийНаСервере("FBS");		
	//КонецЕсли;        
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьМаркетплейсНаСервере(Маркетплейс = "")
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Маркетплейс = Маркетплейс;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");    
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьСтатусОтправленияНовый()
	ИзменитьСтатусОтправленияНаКлиенте("Новый");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияСобран()
	ИзменитьСтатусОтправленияНаКлиенте("Собран");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияОтменен()
	ИзменитьСтатусОтправленияНаКлиенте("Отменен");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияОтменяется()
	ИзменитьСтатусОтправленияНаКлиенте("Отменяется");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияВыкуплен()
	ИзменитьСтатусОтправленияНаКлиенте("Выкуплен");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьСтатусОтправленияСпорный()
	ИзменитьСтатусОтправленияНаКлиенте("Спорный");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьСтатусОтправленияСборка()
	ИзменитьСтатусОтправленияНаКлиенте("Сборка");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьСтатусОтправленияВПути()
	ИзменитьСтатусОтправленияНаКлиенте("В пути");
КонецПроцедуры 	  

&НаКлиенте
Процедура ИзменитьСтатусОтправленияОтправлен()
	ИзменитьСтатусОтправленияНаКлиенте("Отправлен");
КонецПроцедуры 	
		
&НаКлиенте
Процедура ИзменитьСтатусОтправленияВозврат()
	ИзменитьСтатусОтправленияНаКлиенте("Возврат");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияГотовКВыдаче()
	ИзменитьСтатусОтправленияНаКлиенте("Готов к выдаче");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияЗабратьВозврат()
	ИзменитьСтатусОтправленияНаКлиенте("Забрать возврат");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияНаСборке()
	ИзменитьСтатусОтправленияНаКлиенте("На сборке");
КонецПроцедуры 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияОжидаетОплаты()
	ИзменитьСтатусОтправленияНаКлиенте("Ожидает оплаты");
КонецПроцедуры 	    

&НаКлиенте
Процедура ИзменитьСтатусОтправленияОтмененПокупателем()
	ИзменитьСтатусОтправленияНаКлиенте("Отменен покупателем");
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьСтатусОтправленияВЗакупке()
	ИзменитьСтатусОтправленияНаКлиенте("В закупке");
КонецПроцедуры 	 	

&НаКлиенте
Процедура ИзменитьСтатусОтправленияНаКлиенте(СтатусОтправления) 
	
	//Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) 
	//	ИЛИ Не ЗначениеЗаполнено(Объект.СтатусОтправления) 
	//	ИЛИ Не ЗначениеЗаполнено(Объект.Маркетплейс) Тогда
	//    ПоказатьПредупреждение(,"Заполните обязательные поля на закладке отборы: 'Дата доставки', 'Статус отправления', 'Маркетплейс'!");	
	//Иначе	   		                  
		ИзменитьСтатусОтправленияНаСервере(СтатусОтправления);
		СписокОтправленийНаСервере("FBS");		
	//КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ИзменитьСтатусОтправленияНаСервере(СтатусОтправления = "")
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СтатусОтправления = СтатусОтправления;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");    
КонецПроцедуры 

&НаКлиенте
Процедура ИспользоватьРасширеннуюНастройкуЗаказовПриИзменении(Элемент)
	УстановитьОформление();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	П = Новый Структура;  	
	П.Вставить("ЗакрыватьПриВыборе", Истина);
	П.Вставить("Вариант", "СтатусОтправления");

	Попытка		
		ВыбФорма = ОткрытьФорму("ВнешняяОбработка.ОбменSelSup_УТ.Форма.ФормаВыбора",П,ЭтотОбъект);  		
	Исключение 
		ВыбФорма = ОткрытьФорму("Обработка.ОбменSelSup_УТ.Форма.ФормаВыбора",П,ЭтотОбъект);
	КонецПопытки;

КонецПроцедуры 

&НаКлиенте
Процедура МаркетплейсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;   
	
	П = Новый Структура;  	
	П.Вставить("ЗакрыватьПриВыборе", Истина);
	П.Вставить("Вариант", "Маркетплейс");   
	
	ВыбФорма = ОткрытьФорму("Обработка.ОбменSelSup_УТ.Форма.ФормаВыбора",П,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииЗКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	П = Новый Структура;  	
	П.Вставить("ЗакрыватьПриВыборе", Истина);
	П.Вставить("Вариант", "ВидОперацииЗК");
	
	Попытка		
		ВыбФорма = ОткрытьФорму("ВнешняяОбработка.ОбменSelSup_УТ.Форма.ФормаВыбора",П,ЭтотОбъект);  		
	Исключение 
		ВыбФорма = ОткрытьФорму("Обработка.ОбменSelSup_УТ.Форма.ФормаВыбора",П,ЭтотОбъект);
	КонецПопытки;

КонецПроцедуры
#КонецОбласти

#Область КомандыТовары

&НаСервере
Процедура СоздатьНоменклатуруНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ОбработкаОбъект.Заказы Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ОбработкаОбъект.СоздатьНоменклатуру(СтрокаТабличнойЧасти);  
		КонецЕсли;
	КонецЦикла;  
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда) 
	СоздатьНоменклатуруНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьНоменклатуруОстатковНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для каждого СтрокаТабличнойЧасти Из ОбработкаОбъект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
			И СтрокаТабличнойЧасти.ОбновитьОстаток Тогда
			ОбработкаОбъект.СоздатьНоменклатуру(СтрокаТабличнойЧасти);  
		КонецЕсли;				
	КонецЦикла;  
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруОстатков(Команда) 
	СоздатьНоменклатуруОстатковНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработатьТоварыНаСервере(Вариант)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработатьТовары(Вариант);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровSelSup(Команда)
	//Если Не ЗначениеЗаполнено(Объект.ВыбСклад) Тогда
	//	ПоказатьПредупреждение(,"Заполните обязательные поля на закладке товары: 'Склад'!");	
	//Иначе	   		
	//	ОбработатьТоварыНаСервере(2); 	
	//КонецЕсли;
	ОбработатьТоварыНаСервере(2);
КонецПроцедуры   

&НаСервере
Функция СписокМаркетплейсовНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СписокМаркетплейсов = ОбработкаОбъект.ОбработатьМаркетплейсы();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект"); 
	Возврат СписокМаркетплейсов;
КонецФункции

&НаСервере
Процедура СписокОрганизацийSelSupНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработатьОрганизации();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийSelSup(Команда) 
	СписокОрганизацийSelSupНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокСкладовSelSupНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработатьСклады();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура СписокСкладовSelSup(Команда) 
	СписокСкладовSelSupНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиНаСайтеНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.УстановитьОстаткиТоваров();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаткиНаСайте(Команда)
	ОбновитьОстаткиНаСайтеНаСервере();
КонецПроцедуры  

&НаСервере
Процедура СвязатьСкладыНаСайтеНаСервере()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СвязатьСклады();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");  
	
КонецПроцедуры  

&НаСервере
Процедура ПроверитьОрганизацииНаСервере(Отказ)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Строки = ОбработкаОбъект.Организации.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0
		ИЛИ ОбработкаОбъект.Организации.Количество() = 0 Тогда  
		Отказ = Истина;
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");  
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСкладыНаСайте(Команда) 
	
	Отказ = Ложь;
	ПроверитьОрганизацииНаСервере(Отказ);
	Если Отказ Тогда
		ПоказатьПредупреждение(,"Заполните все соответствия организаций на закладке настроек справочников!");
	Иначе	   		
		СвязатьСкладыНаСайтеНаСервере();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение); 
		
КонецПроцедуры  

&НаСервере
Процедура ОбработатьКомплектацииНаСервере(ДанныхШтрихкода)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработатьКомплектации(ДанныхШтрихкода);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода); 
	ОбработатьКомплектацииНаСервере(ДанныхШтрихкода);
	
КонецПроцедуры  

&НаКлиенте
Процедура ВводШтрихкодаПриИзменении() Экспорт
	
	ДанныхШтрихкода = Новый Структура();  
	ДанныхШтрихкода.Вставить("Штрихкод", СокрЛП(Объект.ВводШтрихкода));   
	ДанныхШтрихкода.Вставить("Количество", 1);  
	
	ОбработатьШтрихкоды(ДанныхШтрихкода); 
	ОбработатьКомплектацииНаСервере(ДанныхШтрихкода);  
	
	Объект.ВводШтрихкода = "";
	
КонецПроцедуры

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("НеизвестныеШтрихкоды", ДобавитьНоменклатуруПоШтрихкодам(МассивШтрихкодов));
	СтруктураПараметровДействия.Вставить("ФормаВладелец",        УникальныйИдентификатор);
	
	Если ПравоРегистрацииШтрихкодовНоменклатурыДоступно
		И СтруктураПараметровДействия.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураПараметровДействия, КэшированныеЗначения, ЭтаФорма);
		// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой			
		
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()
// Конец МеханизмВнешнегоОборудования

&НаСервере
Функция ДобавитьНоменклатуруПоШтрихкодам(ДанныеШтрихкодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Таблица.Колонки.Добавить("Штрихкод",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	КэшированныеЗначения.ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ПравоРегистрацииШтрихкодовНоменклатурыДоступно;
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	НеЗакешированныеРанееШтрихкоды = Новый Массив;
	
	Для Каждого ТекШтрихкод Из ДанныеШтрихкодов Цикл
		ТекШтрихкод.Штрихкод = ВРег(СокрЛП(ТекШтрихкод.Штрихкод));
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод, ПрефиксыВесовыхШтрихкодов);
		Если Не ЗначениеЗаполнено(КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод])
			Или КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод].НеизвестныйШтрихкод Тогда
			НеЗакешированныеРанееШтрихкоды.Добавить(ТекШтрихкод.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если НеЗакешированныеРанееШтрихкоды.Количество() > 0 Тогда
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, НеЗакешированныеРанееШтрихкоды);
		
	КонецЕсли;
	
	Для Каждого ТекШтрихкод Из ДанныеШтрихкодов Цикл
		
		ДобавляемыеДанные = КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод];
		
		Если ДобавляемыеДанные.НеизвестныйШтрихкод Тогда
			
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		Иначе
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Номенклатура   = ДобавляемыеДанные.Номенклатура;
			НоваяСтрока.Характеристика = ДобавляемыеДанные.Характеристика;
			НоваяСтрока.Штрихкод       = ДобавляемыеДанные.Штрихкод;
			НоваяСтрока.Упаковка       = ДобавляемыеДанные.Упаковка;
			НоваяСтрока.Количество     = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьТовары(Таблица);
	
	Возврат НеизвестныеШтрихкоды;
	
КонецФункции 

&НаСервере
Процедура ДобавитьТовары(Таблица)
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		НоваяСтрока = Объект.Комплектация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(СтрокаТЧ["Штрихкод"]);
	КонецЦикла;  
	
КонецПроцедуры
#КонецОбласти

#Область КомандыДокументы

&НаСервере
Процедура СписокОтправленийНаСервере(ВидПродажи)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьОтправления(ВидПродажи);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура СписокОтправленийFBS(Команда)
	////Если Не ЗначениеЗаполнено(Объект.ДатаНачала)
	////	ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
	////    ПоказатьПредупреждение(,"Заполните обязательные поля на закладке отборы: 'Период с', 'Период по'!"); 
	//Если Не ЗначениеЗаполнено(Объект.ДатаДоставки) 
	//	ИЛИ Не ЗначениеЗаполнено(Объект.СтатусОтправления) 
	//	ИЛИ Не ЗначениеЗаполнено(Объект.Маркетплейс) Тогда
	//    ПоказатьПредупреждение(,"Заполните обязательные поля на закладке отборы: 'Дата доставки', 'Статус отправления', 'Маркетплейс'!");	
	//Иначе	   	
	ИзменитьСтатусОтправленияНаСервере();
	ИзменитьМаркетплейсНаСервере();
	СписокОтправленийНаСервере("FBS");		
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРеализацииНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьРеализации();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказыПокупателейНаСервере() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ОбработкаОбъект.СформироватьЗаказыПокупателей();  
	ОбработкаОбъект.ВыполнитьКоманду("ОбновитьЗаказыСSelSup");
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказыПокупателей(Команда)   
	СоздатьЗаказыПокупателейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРеализации(Команда)
	СформироватьРеализацииНаСервере();
КонецПроцедуры 

&НаСервере
Процедура ПечатьЭтикетокЗаказовНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПечатьЗаказов();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокЗаказов(Команда)
	ПечатьЭтикетокЗаказовНаСервере();
КонецПроцедуры  

&НаСервере
Процедура ОбновитьЭтикеткиЗаказовНаСервере()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбновитьЭтикеткиЗаказов();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭтикеткиЗаказов(Команда)
	ОбновитьЭтикеткиЗаказовНаСервере();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Функция ОбновитьАдресКартинки()   
	
	Если Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = "";
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			АдресКартинки = РаботаСФайлами.ДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		Исключение
			АдресКартинки = "";
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьАртикулТовараНаСервере(Номенклатура)
	Если ЗначениеЗаполнено(Номенклатура) Тогда  
		Возврат Номенклатура.Артикул;  
	Иначе Возврат "";	
	КонецЕсли;
КонецФункции 

&НаСервере
Функция ПолучитьGIUDТовараНаСервере(Номенклатура)
	Если ЗначениеЗаполнено(Номенклатура) Тогда  
		Возврат Номенклатура.УникальныйИдентификатор();  
	Иначе Возврат "";	
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьНаименованиеНаРусском(ВыбЗначение) 	
	ЗначениеРу = "";
	Если ВыбЗначение = "ALL" Тогда
		ЗначениеРу = "все товары";
	ИначеЕсли  ВыбЗначение = "VISIBLE" Тогда
		ЗначениеРу = "товары, которые видны покупателям";
	ИначеЕсли  ВыбЗначение = "INVISIBLE" Тогда
		ЗначениеРу = "товары, которые по какой-то из причин не видны покупателям";
	ИначеЕсли  ВыбЗначение = "EMPTY_STOCK" Тогда
		ЗначениеРу = "товары, у которых не указано наличие"; 		
	ИначеЕсли  ВыбЗначение = "READY_TO_SUPPLY" Тогда
		ЗначениеРу = "товары, которым можно установить наличие";
	ИначеЕсли  ВыбЗначение = "STATE_FAILED" Тогда
		ЗначениеРу = "товары, создание которых завершилось ошибкой"; 		
	КонецЕсли;
	Возврат ЗначениеРу;
КонецФункции

&НаКлиенте
Процедура ВыбратьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.Заказы Цикл
		СтрокаТаблицы.Обработать = Истина;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.Заказы Цикл
		СтрокаТаблицы.Обработать = Ложь;		
	КонецЦикла;    	
КонецПроцедуры  

&НаКлиенте
Процедура СкладыВыбратьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.Склады Цикл
		СтрокаТаблицы.СвязатьСклады = Истина;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СкладыИсключитьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.Склады Цикл
		СтрокаТаблицы.СвязатьСклады = Ложь;		
	КонецЦикла;    	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыВыбратьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.ОбновитьОстаток = Истина;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсключитьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.ОбновитьОстаток = Ложь;		
	КонецЦикла;    	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыSelSupВыбратьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.ТоварыSelSup Цикл
		СтрокаТаблицы.createlink = Истина;		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыSelSupИсключитьВсеФлажки()	
	Для Каждого СтрокаТаблицы Из Объект.ТоварыSelSup Цикл
		СтрокаТаблицы.createlink = Ложь;		
	КонецЦикла;    	
КонецПроцедуры 

&НаСервере
Процедура ТестSelSupНаСервере() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	РезультатТеста = ОбработкаОбъект.ВыполнитьТестSelSup();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если РезультатТеста <> Неопределено Тогда
		Сообщить ("Тестирование прошло успешно!");
	Иначе
		Сообщить ("Не удалось получить тестовые данные!");
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТестSelSup(Команда) 
	
	ТестSelSupНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НажатьНаСсылкуСтраницыСApiKey(Команда)
	ПерейтиПоНавигационнойСсылке("https://selsup.ru/application/integration/1c/module");
КонецПроцедуры  

&НаСервере
Процедура УстановитьОформлениеНаСервере()  
		
	Если Объект.ИмяМетаданных =  "УправлениеНебольшойФирмой"  Тогда
		 	
		Элементы.СтраницаЗаполнениеУНФ.Видимость = Истина;   
		
		Элементы.ЗаказыЗаказПокупателя.Видимость = Истина;
		Элементы.ЗаказыЗаказКлиента.Видимость = Ложь;
		
	Иначе
		
		Элементы.СтраницаЗаполнениеУНФ.Видимость = Ложь;
		
		Элементы.ЗаказыЗаказПокупателя.Видимость = Ложь;
		Элементы.ЗаказыЗаказКлиента.Видимость = Истина;
				
	КонецЕсли; 
	
	Элементы.ВидОперацииЗК.Видимость                     = Не Объект.ИспользоватьРасширеннуюНастройкуЗаказов;
	Элементы.ВыбКонтрагент.Видимость                     = Не Объект.ИспользоватьРасширеннуюНастройкуЗаказов;
    Элементы.ВыбСоглашение.Видимость                     = Не Объект.ИспользоватьРасширеннуюНастройкуЗаказов; 
	Элементы.ВыбДоговор.Видимость                        = Не Объект.ИспользоватьРасширеннуюНастройкуЗаказов;
	Элементы.РасширеннаяНастройкаЗаказов.Видимость       = Объект.ИспользоватьРасширеннуюНастройкуЗаказов; 
	
	//по умолчанию 
	Элементы.ИзменитьМаркетплейс_AVITO.Видимость         = Ложь;
	Элементы.ИзменитьМаркетплейс_LEROY_MERLIN.Видимость  = Ложь;
    Элементы.ИзменитьМаркетплейс_DETMIR.Видимость        = Ложь; 
	Элементы.ИзменитьМаркетплейс_KAZAN_EXPRESS.Видимость = Ложь;  
	Элементы.ИзменитьМаркетплейс_ALIE_EXPRESS.Видимость  = Ложь; 
	
	Элементы.ИзменитьServices_AVITO.Видимость            = Ложь;
	Элементы.ИзменитьServices_LEROY_MERLIN.Видимость     = Ложь;   
    Элементы.ИзменитьServices_DETMIR.Видимость           = Ложь; 
	Элементы.ИзменитьServices_KAZAN_EXPRESS.Видимость    = Ложь;	
	Элементы.ИзменитьServices_ALIE_EXPRESS.Видимость     = Ложь;

	Если ЗначениеЗаполнено(Объект.ApiKey) Тогда
		
		СписокМаркетплейсов = СписокМаркетплейсовНаСервере();  
		
		Если Не СписокМаркетплейсов = Неопределено Тогда 
			
			Элементы.ИзменитьМаркетплейс_WILDBERRIES.Видимость      = НЕ (СписокМаркетплейсов.НайтиПоЗначению("WILDBERRIES") = Неопределено);    
			Элементы.ИзменитьМаркетплейс_OZON.Видимость             = НЕ (СписокМаркетплейсов.НайтиПоЗначению("OZON") = Неопределено); 
			Элементы.ИзменитьМаркетплейс_YANDEX_MARKET.Видимость    = НЕ (СписокМаркетплейсов.НайтиПоЗначению("YANDEX_MARKET") = Неопределено);  
			Элементы.ИзменитьМаркетплейс_SBER_MEGA_MARKET.Видимость = НЕ (СписокМаркетплейсов.НайтиПоЗначению("SBER_MEGA_MARKET") = Неопределено); 
			
			Элементы.ИзменитьМаркетплейс_AVITO.Видимость            = НЕ (СписокМаркетплейсов.НайтиПоЗначению("AVITO") = Неопределено);    
			Элементы.ИзменитьМаркетплейс_LEROY_MERLIN.Видимость     = НЕ (СписокМаркетплейсов.НайтиПоЗначению("LEROY_MERLIN") = Неопределено); 
			Элементы.ИзменитьМаркетплейс_DETMIR.Видимость           = НЕ (СписокМаркетплейсов.НайтиПоЗначению("DETMIR") = Неопределено);  
			Элементы.ИзменитьМаркетплейс_KAZAN_EXPRESS.Видимость    = НЕ (СписокМаркетплейсов.НайтиПоЗначению("KAZAN_EXPRESS") = Неопределено); 
			Элементы.ИзменитьМаркетплейс_ALIE_EXPRESS.Видимость     = НЕ (СписокМаркетплейсов.НайтиПоЗначению("ALIE_EXPRESS") = Неопределено);
			
		    Элементы.ИзменитьServices_WILDBERRIES.Видимость      = НЕ (СписокМаркетплейсов.НайтиПоЗначению("WILDBERRIES") = Неопределено);    
			Элементы.ИзменитьServices_OZON.Видимость             = НЕ (СписокМаркетплейсов.НайтиПоЗначению("OZON") = Неопределено); 
			Элементы.ИзменитьServices_YANDEX_MARKET.Видимость    = НЕ (СписокМаркетплейсов.НайтиПоЗначению("YANDEX_MARKET") = Неопределено);  
			Элементы.ИзменитьServices_SBER_MEGA_MARKET.Видимость = НЕ (СписокМаркетплейсов.НайтиПоЗначению("SBER_MEGA_MARKET") = Неопределено); 
			
			Элементы.ИзменитьServices_AVITO.Видимость            = НЕ (СписокМаркетплейсов.НайтиПоЗначению("AVITO") = Неопределено);    
			Элементы.ИзменитьServices_LEROY_MERLIN.Видимость     = НЕ (СписокМаркетплейсов.НайтиПоЗначению("LEROY_MERLIN") = Неопределено); 
			Элементы.ИзменитьServices_DETMIR.Видимость           = НЕ (СписокМаркетплейсов.НайтиПоЗначению("DETMIR") = Неопределено);  
			Элементы.ИзменитьServices_KAZAN_EXPRESS.Видимость    = НЕ (СписокМаркетплейсов.НайтиПоЗначению("KAZAN_EXPRESS") = Неопределено);  
			Элементы.ИзменитьServices_ALIE_EXPRESS.Видимость     = НЕ (СписокМаркетплейсов.НайтиПоЗначению("ALIE_EXPRESS") = Неопределено); 
			
			РНЗМаркетплейс_СписокВыбора = Элементы.РасширеннаяНастройкаЗаказовМаркетплейс.СписокВыбора; 
			РНЗМаркетплейс_СписокВыбора.Очистить();
			Для каждого ЭлементСписка Из СписокМаркетплейсов Цикл  
				Если Не ЭлементСписка.Значение = "NONE" Тогда
					РНЗМаркетплейс_СписокВыбора.Добавить(ЭлементСписка.Значение); 
				КонецЕсли;
			КонецЦикла;	 
			
			РНЗВидОперацииЗКСписокВыбора = Элементы.РасширеннаяНастройкаЗаказовВидОперацииЗК.СписокВыбора; 
			РНЗВидОперацииЗКСписокВыбора.Очистить();
			РНЗВидОперацииЗКСписокВыбора.Добавить("Реализация");
			РНЗВидОперацииЗКСписокВыбора.Добавить("Передача на комиссию"); 
			
		КонецЕсли;	
		
	КонецЕсли;  
	
КонецПроцедуры  

&НаКлиенте  
Процедура УстановитьОформление()	
	УстановитьОформлениеНаСервере(); 
КонецПроцедуры

// Проверка, что выбран верный тип значения 
&НаСервере
Функция ПроверкаТиповРеквизитов()
	
	ЕстьОшибки = Ложь;
	Если Объект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда
		
		Если  ТипЗнч(Объект.ВыбДоговор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Сообщить ("Реквизиту ВыбДоговор необходимо установить тип значения СправочникСсылка.ДоговорыКонтрагентов");
			ЕстьОшибки = Истина;
		КонецЕсли;	
		
		Если ТипЗнч(Объект.ВыбЕдиницаИзмеренияУНФ) <> Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			Сообщить ("Реквизиту ВыбЕдиницаИзмеренияУНФ необходимо установить тип значения СправочникСсылка.КлассификаторЕдиницИзмерения");
			ЕстьОшибки = Истина;  
		КонецЕсли;
		
		ЗнОбъект = РеквизитФормыВЗначение("Объект");
		Реквизиты = ЗнОбъект.метаданные().ТабличныеЧасти.Заказы.Реквизиты;
		Для Каждого ТекСтрока ИЗ Реквизиты  Цикл
			Если ТекСтрока.Имя = "ЗаказПокупателя"
				И Строка(ТекСтрока.Тип) = "Строка" Тогда  			
				Сообщить ("Реквизиту ЗаказПокупателя в ТЧ Заказы необходимо установить тип значения ДокументСсылка.ЗаказПокупателя");
				ЕстьОшибки = Истина;
			КонецЕсли; 			
		КонецЦикла;
				
	ИначеЕсли  Объект.ИмяМетаданных = "УправлениеТорговлей"  Тогда
		
		Если  ТипЗнч(Объект.ВыбСоглашение) <> Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			Сообщить ("Реквизиту ВыбСоглашение необходимо установить тип значения СправочникСсылка.СоглашенияСКлиентами");
			ЕстьОшибки = Истина;
		КонецЕсли;	
		Если  ТипЗнч(Объект.ВыбУпаковка) <> Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
			Сообщить ("Реквизиту ВыбУпаковка необходимо установить тип значения СправочникСсылка.УпаковкиЕдиницыИзмерения");
			ЕстьОшибки = Истина;
		КонецЕсли;	
		//Если  ТипЗнч(Объект.ВыбСкладРеал) <> Тип("СправочникСсылка.Склады") Тогда
		//	Сообщить ("Реквизиту ВыбСкладРеал необходимо установить тип значения СправочникСсылка.Склады");
		//	ЕстьОшибки = Истина;
		//КонецЕсли;
	
		ЗнОбъект = РеквизитФормыВЗначение("Объект");
		Реквизиты = ЗнОбъект.метаданные().ТабличныеЧасти.Заказы.Реквизиты;
		Для Каждого ТекСтрока ИЗ Реквизиты  Цикл
			Если ТекСтрока.Имя = "ЗаказКлиента"
				И Строка(ТекСтрока.Тип) <> "Заказ клиента" Тогда  			
				Сообщить ("Реквизиту ЗаказКлиента в ТЧ Заказы необходимо установить тип значения ДокументСсылка.ЗаказКлиента");
				ЕстьОшибки = Истина;
			КонецЕсли;  
		
		КонецЦикла;

	Иначе
		Сообщить ("Конфигурация не поддерживается!");
	КонецЕсли;
	Возврат ЕстьОшибки;
КонецФункции
#КонецОбласти

#Область СопоставлениеТоваров

&НаКлиенте
Процедура TextQueryПриИзменении(Элемент)
	
	Элементы.ТоварыSelSup.ВыделенныеСтроки.Очистить();  
	ОбновитьПродуктыSelSupНаСервере(); 	 
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьПродуктыSelSupНаСервере() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ТоварыSelSup.Очистить(); 
	ОбработкаОбъект.Товары1C.Очистить();
	
	ТаблицаНоменклатурыSelSup = ОбработкаОбъект.НайтиПродуктыSelSup(ОбработкаОбъект.TextQuery, ОбработкаОбъект.Services); 
	Если Не ТаблицаНоменклатурыSelSup = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из ТаблицаНоменклатурыSelSup Цикл
			НоваяСтрока = ОбработкаОбъект.ТоварыSelSup.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);    	
		КонецЦикла;	
		
		ТаблицаНоменклатуры1C = ОбработкаОбъект.ОбработатьТаблицуНоменклатурыSelSup(ТаблицаНоменклатурыSelSup); 		
		Если Не ТаблицаНоменклатуры1C = Неопределено Тогда 
			Для каждого СтрокаТабличнойЧасти Из ТаблицаНоменклатуры1C Цикл
				НоваяСтрока = ОбработкаОбъект.Товары1C.Добавить();  
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти); 				
			КонецЦикла;  
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция СопоставитьНоменклатурыНаСервере(name, id, article, oneCId)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");  
    oneCId = ОбработкаОбъект.СвязатьТовары_SelSup_С_1С(name, id, article, oneCId); 
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");	
	
	Возврат oneCId;
	
КонецФункции

&НаСервере
Процедура СопоставитьНоменклатурыСпискомНаСервере()
	
	Для каждого ТекущиеДанныеТоварыSelSup Из Объект.ТоварыSelSup Цикл
		
		Если Не ТекущиеДанныеТоварыSelSup.createlink Тогда
			Продолжить;
		КонецЕсли;	
		
		Отбор = Новый Структура();
		Отбор.Вставить("id", ТекущиеДанныеТоварыSelSup.id);
		ТекущиеДанныеТовары1C = Объект.Товары1C.НайтиСтроки(Отбор); 
		Если ТекущиеДанныеТовары1C.Количество() = 0 Тогда 
			Сообщить("Не найден товар: " + ТекущиеДанныеТоварыSelSup.name + " в строке " + ТекущиеДанныеТоварыSelSup.НомерСтроки + ". Сопоставление не выполнено.", СтатусСообщения.Внимание);	
		ИначеЕсли ТекущиеДанныеТовары1C.Количество() > 1 Тогда    
			Сообщить("Найдено больше одного товара: " + ТекущиеДанныеТоварыSelSup.name + " в строке " + ТекущиеДанныеТоварыSelSup.НомерСтроки + ". Сопоставление не выполнено. Рекомендуется выполнить связку товаров вручную.", СтатусСообщения.Внимание);		
		ИначеЕсли ТекущиеДанныеТовары1C.Количество() > 0 Тогда
			OneCId = СопоставитьНоменклатурыНаСервере(ТекущиеДанныеТоварыSelSup.name, ТекущиеДанныеТоварыSelSup.id, ПолучитьАртикулТовараНаСервере(ТекущиеДанныеТовары1C[0].Номенклатура), ПолучитьGIUDТовараНаСервере(ТекущиеДанныеТовары1C[0].Номенклатура)); 
			Если Не OneCId = Неопределено Тогда   
				ТекущиеДанныеТоварыSelSup.OneCId = OneCId;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры  

&НаСервере
Процедура УдалитьСопоставлениеНоменклатурыСпискомНаСервере()
	
	Для каждого ТекущиеДанныеТоварыSelSup Из Объект.ТоварыSelSup Цикл
		
		Если Не ТекущиеДанныеТоварыSelSup.createlink Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(ТекущиеДанныеТоварыSelSup.oneCId) Тогда
			Продолжить;
		КонецЕсли;	
		
		Отбор = Новый Структура();
		Отбор.Вставить("id", ТекущиеДанныеТоварыSelSup.id);
		ТекущиеДанныеТовары1C = Объект.Товары1C.НайтиСтроки(Отбор); 
		Если ТекущиеДанныеТовары1C.Количество() = 0 Тогда   
			//Сообщить("Не найден товар, с которым нужно удалить связку: " + ТекущиеДанныеТоварыSelSup.name + " в строке " + ТекущиеДанныеТоварыSelSup.НомерСтроки + ". Удаление сопоставления не выполнено.", СтатусСообщения.Внимание);	
			OneCId = СопоставитьНоменклатурыНаСервере(ТекущиеДанныеТоварыSelSup.name, ТекущиеДанныеТоварыSelSup.id, ТекущиеДанныеТоварыSelSup.article, NULL);
			Если Не OneCId = Неопределено Тогда   
				ТекущиеДанныеТоварыSelSup.OneCId = OneCId;
			КонецЕсли;		
		ИначеЕсли ТекущиеДанныеТовары1C.Количество() > 1 Тогда    
			Сообщить("Найдено больше одного товара: " + ТекущиеДанныеТоварыSelSup.name + " в строке " + ТекущиеДанныеТоварыSelSup.НомерСтроки + ". Удаление сопоставление не выполнено. Рекомендуется выполнить отвязку товаров вручную.", СтатусСообщения.Внимание);		
		ИначеЕсли ТекущиеДанныеТовары1C.Количество() > 0 Тогда
			OneCId = СопоставитьНоменклатурыНаСервере(ТекущиеДанныеТоварыSelSup.name, ТекущиеДанныеТоварыSelSup.id, ПолучитьАртикулТовараНаСервере(ТекущиеДанныеТовары1C[0].Номенклатура), NULL); 
			Если Не OneCId = Неопределено Тогда   
				ТекущиеДанныеТоварыSelSup.OneCId = OneCId;
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатурыСписком(Команда) 
	СопоставитьНоменклатурыСпискомНаСервере(); 
	СписокТоваровSelSupПриАктивизацииСтроки(Неопределено);	
КонецПроцедуры   

&НаКлиенте
Процедура УдалитьСопоставлениеНоменклатурыСписком(Команда) 
	УдалитьСопоставлениеНоменклатурыСпискомНаСервере(); 
	СписокТоваровSelSupПриАктивизацииСтроки(Неопределено);	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьСписокТоваровSelSup() 
	ОбновитьПродуктыSelSupНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ПродолжитьОперациюСопоставленияТоваров(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущиеДанныеТоварыSelSup = Элементы.ТоварыSelSup.ТекущиеДанные;  
		ТекущиеДанныеТовары1C = Элементы.Товары1C.ТекущиеДанные;
		Если Не ТекущиеДанныеТоварыSelSup = Неопределено 
			И Не ТекущиеДанныеТовары1C = Неопределено Тогда
			OneCId = СопоставитьНоменклатурыНаСервере(ТекущиеДанныеТоварыSelSup.name, ТекущиеДанныеТоварыSelSup.id, ТекущиеДанныеТовары1C.article, ПолучитьGIUDТовараНаСервере(ТекущиеДанныеТовары1C.Номенклатура));
			Если Не OneCId = Неопределено Тогда   
				ТекущиеДанныеТоварыSelSup.OneCId = OneCId;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	СписокТоваровSelSupПриАктивизацииСтроки(Неопределено);
        
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуры(Команда) 
		
	Оповещение = Новый ОписаниеОповещения("ПродолжитьОперациюСопоставленияТоваров", ЭтотОбъект);
	Сообщение = НСтр("ru='Выбранная привязка товаров будет отражена на сайте SelSup.ru.
	|Вы уверенны что хотите продолжить операцию?'");
	ПоказатьВопрос(Оповещение, Сообщение, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПродолжитьОперациюУдаленияСопоставленияТоваров(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущиеДанныеТоварыSelSup = Элементы.ТоварыSelSup.ТекущиеДанные;  
		ТекущиеДанныеТовары1C = Элементы.Товары1C.ТекущиеДанные;
		Если Не ТекущиеДанныеТоварыSelSup = Неопределено 
			И Не ТекущиеДанныеТовары1C = Неопределено Тогда
			OneCId = СопоставитьНоменклатурыНаСервере(ТекущиеДанныеТоварыSelSup.Name, ТекущиеДанныеТоварыSelSup.id, ТекущиеДанныеТовары1C.article, NULL);
			Если Не OneCId = Неопределено Тогда   
				ТекущиеДанныеТоварыSelSup.OneCId = OneCId;
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли; 
	
	СписокТоваровSelSupПриАктивизацииСтроки(Неопределено);
        
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСопоставлениеНоменклатур(Команда) 
		
	Оповещение = Новый ОписаниеОповещения("ПродолжитьОперациюУдаленияСопоставленияТоваров", ЭтотОбъект);
	Сообщение = НСтр("ru='Удаленная привязка товаров будет отражена на сайте SelSup.ru.
	|Вы уверенны что хотите продолжить операцию?'");
	ПоказатьВопрос(Оповещение, Сообщение, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры  

&НаКлиенте
Процедура СписокТоваровSelSupПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ТоварыSelSup.ТекущиеДанные;   
	
	Если ТекущиеДанные = Неопределено Тогда
		// ТЧ ТоварыSelSup пустая
		Элементы.Товары1C.ОтборСтрок = Неопределено;
		Элементы.ФормаСопоставитьНоменклатуру.Доступность = Ложь;  
		Элементы.ФормаУбратьСопоставлениеНоменклатур.Доступность = Ложь;
	Иначе
		// Для ТЧ Товары1C устанавливаем отбор по текущему id
		ТекущийId = ТекущиеДанные.Id;  
		ТекущийCId = ТекущиеДанные.oneCId; 
		Элементы.ФормаСопоставитьНоменклатуру.Доступность = Не ЗначениеЗаполнено(ТекущийCId);  
		Элементы.ФормаУбратьСопоставлениеНоменклатур.Доступность = ЗначениеЗаполнено(ТекущийCId); 
		Элементы.Товары1C.ОтборСтрок = Новый ФиксированнаяСтруктура("id", ТекущийId); 	
    КонецЕсли;  
		
КонецПроцедуры

&НаКлиенте
Процедура Товары1CПриИзменении(Элемент)
	
	ТекущиеДанныеТоварыSelSup = Элементы.ТоварыSelSup.ТекущиеДанные; 
	
	Если Не ТекущиеДанныеТоварыSelSup = Неопределено Тогда 
		ТекущиеДанныеТовары1C = Элементы.Товары1C.ТекущиеДанные; 
		ТекущиеДанныеТовары1C.id = ТекущиеДанныеТоварыSelSup.id; 
		ТекущиеДанныеТовары1C.article = ПолучитьАртикулТовараНаСервере(ТекущиеДанныеТовары1C.Номенклатура);	
		ТекущиеДанныеТовары1C.oneCId  = ПолучитьGIUDТовараНаСервере(ТекущиеДанныеТовары1C.Номенклатура);	
	КонецЕсли;  
	
КонецПроцедуры
#КонецОбласти

