Перем UrlSelSup; //api.selsup.ru 

#Область ОбработчикиСобытийФормы
Функция СведенияОВнешнейОбработке(ВерсияБСП = "") Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Вид 	 		  = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия 		  = "1.01";  
	
	ПараметрыРегистрации.Вставить("Наименование", "Интеграция c SelSup"); 
	ПараметрыРегистрации.Вставить("Информация", "Обработка делает обновление остатков на сайте SelSup, формирует заказы и комплектации в 1С"); 	 
		
	ТаблицаКоманд = ПолучитьТаблицуКоманд();    
		
	ДобавитьКоманду(ТаблицаКоманд,
	"Открыть форму интеграции с SelSup", 
	"ОткрытьФормуИнтеграцииСSelSup", 
	ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы());
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	ДобавитьКоманду(ТаблицаКоманд,
	"Обновить остатки на SelSup", 
	"ОбновитьОстаткиНаSelSup", 
	ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода()); 
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции

Функция ПолучитьТаблицуКоманд()   
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка")); 
	
	Возврат Команды;          
	
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")  
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;   
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	// Реализация логики команды
	Если ИдентификаторКоманды = "ОбновитьОстаткиНаSelSup" Тогда  
		
		//Mzo5UjZ5RWJHWjByWkZISzMyejJxZ3kyaWNi==
		ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Информация, , , "Запущено регламентное обновление остатков.");	  
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	SS_КлючиAPI.КлючAPI КАК КлючAPI
		|ИЗ
		|	РегистрСведений.SS_КлючиAPI КАК SS_КлючиAPI
		|ГДЕ
		|	SS_КлючиAPI.Использовать");
		
		ТаблицаКлючейAPI = Запрос.Выполнить().Выгрузить();
		Если ТаблицаКлючейAPI.Количество() > 0 Тогда  
			ApiKey = ТаблицаКлючейAPI[0].КлючAPI;
			ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Информация, , , "Ключ API получен.");
			ОбновитьОстаткиНаСайте();
		Иначе
			ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка при получении ключа API");	
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Информация, , , "Завершено регламентное обновление остатков.");	
		
	КонецЕсли;
  
КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейс 
Функция ОбработатьМаркетплейсы() Экспорт
	
	СписокМаркетплейсов = Новый СписокЗначений();
		
	// Находим список маркетплейсов, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОМаркетплейсах(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат СписокМаркетплейсов;
		КонецЕсли;
		
		Попытка
			МассивМаркетплейсов = РезультатЗапроса;
			Для каждого СтрокаМаркетплейса Из МассивМаркетплейсов Цикл 
				Если СтрокаМаркетплейса.Свойство("service") Тогда 
					service = СтрокаМаркетплейса["service"];
					Если СписокМаркетплейсов.НайтиПоЗначению(service) = Неопределено Тогда  
						СписокМаркетплейсов.Добавить(service);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			Если СтрокаМаркетплейса.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	 
	Возврат СписокМаркетплейсов;
			
КонецФункции  

Процедура ОбработатьКомплектации(ДанныхШтрихкода) Экспорт 
	
	Комплектация.Свернуть("Номенклатура, Характеристика, Упаковка, Штрихкод", "Количество");  
	
	// Находим список товаров на упаковку		
	РезультатЗапроса = ИнформацияОТоварахНаУпаковку(ДанныхШтрихкода.Штрихкод); 
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ТаблицаЗаказа = Новый ТаблицаЗначений();
	ТаблицаЗаказа.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаказа.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Попытка
		
		Для каждого СтрокаТовара Из РезультатЗапроса.products Цикл 
			
			НоваяСтрока = ТаблицаЗаказа.Добавить();
			НоваяСтрока.Количество = СтрокаТовара.quantity;

			barcodes = СтрокаТовара.product.barcodes;
			Если barcodes.Количество() > 0 Тогда 
				НоваяСтрока.ШтрихКод = barcodes[0].barcode;  
			КонецЕсли; 
			
		КонецЦикла;
		
	Исключение
		СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	КопияКомплектация = Комплектация.Выгрузить();
	КопияКомплектация.Свернуть("Штрихкод", "Количество"); 
	
	СчетчикСтрокЗаказа = 0;
	Для каждого СтрокаЗаказа Из ТаблицаЗаказа Цикл  
		
		Отбор = Новый Структура();
		Отбор.Вставить("Штрихкод", СтрокаЗаказа.Штрихкод); 
		СтрокиКомплектации = КопияКомплектация.НайтиСтроки(Отбор); 
		
		Если СтрокиКомплектации.Количество() > 0
			И СтрокиКомплектации[0].Количество  = СтрокаЗаказа.Количество Тогда 
			СчетчикСтрокЗаказа = СчетчикСтрокЗаказа + 1;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если СчетчикСтрокЗаказа = ТаблицаЗаказа.Количество() Тогда 
		
		Если УкомплектоватьЗаказ(РезультатЗапроса.invoiceNumber, РезультатЗапроса.id) Тогда   
			НапечататьЭтикетки(РезультатЗапроса.id);
			Комплектация.Очистить();
		КонецЕсли;  
		
	КонецЕсли;   	
			
КонецПроцедуры  

Процедура ОбработатьОрганизации() Экспорт
	
	Организации.Очистить();
	
	// Находим список организаций, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОбОрганизациях(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			МассивОрганизаций = РезультатЗапроса["rows"];
			Для каждого СтрокаОрганизации Из МассивОрганизаций Цикл 
				НоваяСтрока = Организации.Добавить();
				НоваяСтрока.ID_SelSup               = СтрокаОрганизации.id; 
				НоваяСтрока.НаименованиеОрганизации = СтрокаОрганизации.organization.shortName; 						 				
			КонецЦикла;
			Если МассивОрганизаций.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
		
	//// Заполняем организации
	//Для каждого СтрокаОрганизации Из Организации Цикл		
	//	ЗаполнитьОрганизацию(СтрокаОрганизации);		
	//КонецЦикла;
	
КонецПроцедуры  

Процедура ОбработатьСклады_ONE_C(Склады_ONE_C) Экспорт
	
	
	// Находим список складов ONE_C, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОСкладахONE_C(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Попытка
			МассивСкладов = РезультатЗапроса;
			Для каждого СтрокаСклада Из МассивСкладов Цикл 
				НоваяСтрока = Склады_ONE_C.Добавить();
				НоваяСтрока.ID_SelSup          = СтрокаСклада.id; 
				НоваяСтрока.warehouseId        = СтрокаСклада.warehouseServices[0].warehouseId;
				Для каждого СтрокаСклада Из СтрокаСклада["warehouseServices"] Цикл 
					Если Не ЗначениеЗаполнено(НоваяСтрока.Склад) Тогда
						GUID = СтрокаСклада["externalId"];
						Если Не СтрНайти(GUID, "-") = 0 Тогда
							НоваяСтрока.ID_1C = Новый УникальныйИдентификатор(GUID);
							НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(НоваяСтрока.ID_1C);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока.НаименованиеСклада = СтрокаСклада.name; 						 				
			КонецЦикла;
			Если МассивСкладов.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки()); 
			Возврат;
		КонецПопытки; 
		
	КонецЦикла; 
		
КонецПроцедуры

Процедура ОбработатьСклады() Экспорт
		
	Склады_ONE_C = Склады.ВыгрузитьКолонки(); 
	ОбработатьСклады_ONE_C(Склады_ONE_C);
	
	Склады.Очистить();
	
	// Находим список складов, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОСкладах(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			МассивСкладов = РезультатЗапроса;
			Для каждого СтрокаСклада Из МассивСкладов Цикл   
				
			    //не связываем удаленные склады	
				Если СтрокаСклада.deleted Тогда
					Продолжить;
			    КонецЕсли;		
				
				НоваяСтрока = Склады.Добавить();
				НоваяСтрока.ID_SelSup          = СтрокаСклада.id;    
				НоваяСтрока.НаименованиеСклада = СтрокаСклада.name; 
				
				// Заполняем склады
				Отбор = Новый Структура();
				Отбор.Вставить("ID_SelSup", СтрокаСклада.id);
				Строки = Склады_ONE_C.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					НоваяСтрока.Склад       = Строки[0].Склад; 
					НоваяСтрока.warehouseId = Строки[0].warehouseId;
				КонецЕсли;
								
			КонецЦикла;
			Если МассивСкладов.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
			
КонецПроцедуры

// Вариант 1 : остатки товаров 2 - отчет по товарам, 3 - цены (выполняется автоматом с вариантом 1)
Процедура ОбработатьТовары_(Вариант) Экспорт
	
	Товары.Очистить();
	
	// Находим список товаров, имеющихся в ЛК
	Страница = 0;
	Если Вариант = 1 ИЛи Вариант = 2 Тогда
		
		Пока Истина Цикл
			
			Страница = Страница + 1;
			
			//Если Страница > 2 Тогда Прервать КонецЕсли;
			
			РезультатЗапроса = ИнформацияОСтокахТоваров(Вариант, Страница);  
			
			Если РезультатЗапроса = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Попытка
				МассивТоваров = РезультатЗапроса["rows"];
				Для каждого СтрокаТовара Из МассивТоваров Цикл 
					Если   Вариант = 1 Тогда
						НоваяСтрока = Товары.Добавить();
						НоваяСтрока.ID 			  = СтрокаТовара["view"].model.article;
						НоваяСтрока.ОстатокSelSup = СтрокаТовара["instockQuantity"];
						
						НоваяСтрока.ID_SelSup  	                    = СтрокаТовара["id"];
						//НоваяСтрока.ОжидаетсяКПоставкеSelSup 			= СтрокаТовара["stock"]["coming"];
						//НоваяСтрока.ВРезервеSelSup 	             	= СтрокаТовара["stock"]["reserved"];
						
					ИначеЕсли Вариант = 2 Тогда
						НоваяСтрока = Товары.Добавить();
						НоваяСтрока.Артикул 		   = СтрокаТовара["view"].model.article;
						НоваяСтрока.ID_SelSup          = СтрокаТовара.id;  
						НоваяСтрока.НаименованиеТовара = СтрокаТовара.name;
						Если СтрокаТовара.Свойство("skuId") Тогда 
							НоваяСтрока.ТЧ_SKU = СтрокаТовара.skuId; 
						КонецЕсли;  
						Если СтрокаТовара.Свойство("price") Тогда
							НоваяСтрока.Цена = СтрокаТовара["price"];  
						КонецЕсли; 
						
						//плоская таблица штрих-кодов
						barcodes = СтрокаТовара["barcodes"]; 
						j = 0;
						Для каждого ЭлементМассива Из barcodes Цикл  
							Если j = 0 Тогда
								НоваяСтрока.ШтрихКод = ЭлементМассива.barcode;   
							Иначе        
								ДублирующаяСтрока = Товары.Добавить(); 
								ЗаполнитьЗначенияСвойств(ДублирующаяСтрока, НоваяСтрока, , "ШтрихКод"); 
								ДублирующаяСтрока.ШтрихКод = ЭлементМассива.barcode;
							КонецЕсли;	
							j = j + 1;
						КонецЦикла;		
										
					КонецЕсли;   
					
				КонецЦикла;
				Если МассивТоваров.Количество() < 200 Тогда
					Прервать;
				КонецЕсли;
			Исключение
				СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли; 
		
	// Заполняем остатки
	Для каждого СтрокаТовара Из Товары Цикл
		
		ЗаполнитьНоменклатуру(СтрокаТовара);
		ЗаполнитьОстатки(СтрокаТовара);
		ЗаполнитьЦенуТовара(СтрокаТовара);
		
		
		Если НЕ СтрокаТовара.ЕстьОшибка И СтрокаТовара.ОстатокSelSup <> СтрокаТовара.Остаток1С Тогда
			СтрокаТовара.ОбновитьОстаток = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТовары(Вариант) Экспорт
	
	Товары.Очистить();  
	
	ТаблицаОстатков = ПолучитьТаблицуОстатков(ВыбСклад);  
	
	Для каждого СтрокаТовара Из ТаблицаОстатков Цикл 
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);	  
		
	КонецЦикла;
			
КонецПроцедуры

Процедура СформироватьОтправления(ВидПродажи = Неопределено) Экспорт
	
	Заказы.Очистить();

	// Получаем список товаров, опубликованных в ЛК
	Страница = 0;
	
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ОтправленияСоСкладаПродавца(Страница);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка                               
			МассивТоваров = РезультатЗапроса["rows"];
			Для каждого СтрокаТовара Из МассивТоваров Цикл  
								
				МассивПродуктовЗаказа = СтрокаТовара["products"];
				Для Каждого ТекТовар ИЗ МассивПродуктовЗаказа Цикл 
					 
					Попытка 
						НомерЗаказа = СтрокаТовара["invoiceNumber"]; 
					Исключение 
					КонецПопытки;
				
					Если ЗначениеЗаполнено(ЭтотОбъект.ВыбНомерЗаказа)
						И ЭтотОбъект.ВыбНомерЗаказа <> НомерЗаказа Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Заказы.Добавить();    
					
					Если Не ЗначениеЗаполнено(НомерЗаказа) Тогда
						Сообщить ("Не найден номер заказа в строке " + НоваяСтрока.НомерСтроки);
					КонецЕсли;
					
					ДатаСоздания = ПолучитьДатуОтвета(СтрокаТовара.createdDate, "ДатаСоздания");
					НоваяСтрока.ДатаСоздания = ДатаСоздания;      
					//ПредельнаяДатаСборки = ПолучитьДатуОтвета(СтрокаТовара.deliveryDate, "ПредельнаяДатаСборки"); 
					ПредельнаяДатаСборки = ПолучитьДатуОтвета(СтрокаТовара.createdDate, "ПредельнаяДатаСборки");
					НоваяСтрока.ПредельнаяДатаСборки = ПредельнаяДатаСборки;
					
					НоваяСтрока.IDЗаказа 			    = СтрокаТовара["id"]; 
					НоваяСтрока.НомерЗаказа 			= НомерЗаказа; 
					Если СтрокаТовара.Свойство("warehouseId") Тогда
						НоваяСтрока.warehouseId    	        = СтрокаТовара["warehouseId"];
					КонецЕсли;
					НоваяСтрока.organizationId    	    = СтрокаТовара["organizationId"];   
					НоваяСтрока.НомерОтправления 	    = НомерЗаказа;                      //НомерЗаказа???   
					НоваяСтрока.Маркетплейс 			= СтрокаТовара["service"];       
					ПоискЗаказ = НайтиЗаказПоНомеру(НоваяСтрока.НомерОтправления);
					Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой" Тогда
						НоваяСтрока.ЗаказПокупателя = ПоискЗаказ;						
					Иначе
						НоваяСтрока.ЗаказКлиента = ПоискЗаказ;		
					КонецЕсли;
					СтатусЗаказа = СтрокаТовара["status"]; 
					НоваяСтрока.СтатусЗаказа = ПолучитьНаименованиеСтатуса(СтатусЗаказа);									
					НоваяСтрока.НаименованиеТовара = ТекТовар.product.name;
					НоваяСтрока.Артикул = ТекТовар.product.view.model.article; 
					НоваяСтрока.Цена = ТекТовар.price;
					НоваяСтрока.Заказано = ТекТовар.quantity;
					НоваяСтрока.ID_sku = ТекТовар.product.skuId; 
					
					barcodes = ТекТовар.product.barcodes;
					Если barcodes.Количество() > 0 Тогда 
						НоваяСтрока.ШтрихКод = barcodes[0].barcode;  
					КонецЕсли;					
					
					НоваяСтрока.СуммаЗаказа = НоваяСтрока.Цена*НоваяСтрока.Заказано;
					
					Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой" Тогда
						ЗаполнитьНоменклатуру(НоваяСтрока, Истина);
					Иначе          
						Если ЗначениеЗаполнено(НоваяСтрока.ШтрихКод) Тогда
							ПоискНоменклатура = НайтиНоменклатуруERPПоШтрихКоду(НоваяСтрока.ШтрихКод, НоваяСтрока, Истина);
							Если ЗначениеЗаполнено(ПоискНоменклатура) Тогда    
								НоваяСтрока.Номенклатура = ПоискНоменклатура.Ссылка; 
								НоваяСтрока.Характеристика = ПоискНоменклатура.Характеристика;
							КонецЕсли;
						КонецЕсли;	
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
							И ЗначениеЗаполнено(НоваяСтрока.Артикул) Тогда
							ПоискНоменклатура = НайтиНоменклатуруERPПоID(НоваяСтрока.Артикул, НоваяСтрока, Истина);
							Если ЗначениеЗаполнено(ПоискНоменклатура) Тогда    
								НоваяСтрока.Номенклатура = ПоискНоменклатура.Ссылка; 
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;				
					
				КонецЦикла;
				
			КонецЦикла;
			Если МассивТоваров.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
	
	Если Заказы.Количество() = 0 Тогда
		Сообщить("Заказов на указанную дату не обнаружено."); 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьОстаткиНаСайте() Экспорт
		
	КопияСклады_ONE_C = Склады.ВыгрузитьКолонки(); 
	ОбработатьСклады_ONE_C(КопияСклады_ONE_C);	
	
	Склады_ONE_C = Склады.ВыгрузитьКолонки();  
	Для каждого СтрокаСклада Из КопияСклады_ONE_C Цикл 
		Если СтрокаСклада.Склад = Справочники.Склады.ПустаяСсылка()
			ИЛИ СтрокаСклада.Склад.ПолучитьОбъект() = Неопределено Тогда 
			Продолжить;
		Иначе	
			НоваяСтрока = Склады_ONE_C.Добавить();  
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСклада);
		КонецЕсли;	
	КонецЦикла;	  
	
	Если Склады_ONE_C.Количество() = 0 Тогда 
	    Сообщить("Привязанные склады не найдены.");
		ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Ошибка, , , "Привязанные склады не найдены.");
		Возврат;	
	КонецЕсли;	
	
    ТаблицаОстатков = ПолучитьТаблицуОстатков(Склады_ONE_C.ВыгрузитьКолонку("Склад"));  
	
	МассивТоваров = Новый Массив;
	
	Для каждого ТекСтр Из ТаблицаОстатков Цикл
		
		МассивТоваров.Добавить(ТекСтр);
		Если МассивТоваров.Количество() = 100 Тогда
			УстановитьОстатки(МассивТоваров);
			МассивТоваров.Очистить();
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивТоваров.Количество() > 0 Тогда
		УстановитьОстатки(МассивТоваров);
	КонецЕсли;
		
КонецПроцедуры 

//  перебор все товаров из ТЗ Товары и запись в МассивТоваров по 100 для обновления
//  в процедуре УстановитьОстатки  (МассивТоваров)
Процедура УстановитьОстаткиТоваров() Экспорт
	
	МассивТоваров = Новый Массив;
	
	Для каждого ТекСтр Из Товары Цикл
		
		Если НЕ ТекСтр.ОбновитьОстаток Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтр.ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
				
		МассивТоваров.Добавить(ТекСтр);
		Если МассивТоваров.Количество() = 100 Тогда
			УстановитьОстатки(МассивТоваров);
			МассивТоваров.Очистить();
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивТоваров.Количество() > 0 Тогда
		УстановитьОстатки(МассивТоваров);
	КонецЕсли;
	
	Сообщить("Остатки обновлены.");
	
КонецПроцедуры 

//  перебор все склады из ТЗ Склады и запись в МассивСкладов по 100 для обновления
//  в процедуре УстановитьСвязьСоСкладом  (МассивСкладов)
Процедура СвязатьСклады() Экспорт
		
	Для каждого ТекСтр Из Склады Цикл
		
		Если НЕ ТекСтр.СвязатьСклады Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтр.Склад) Тогда
			Сообщить("В строке " + ТекСтр.НомерСтроки + " не заполнен склад.");
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ТекСтр.ID_SelSup) Тогда   
			Сообщить("В строке " + ТекСтр.НомерСтроки + " не определен склад SelSup.");
			Продолжить;
		КонецЕсли;
		
		УстановитьСвязьСоСкладом(ТекСтр);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьРеализации() Экспорт
	
	Для Каждого ТекСтрока Из ЭтотОбъект.Заказы Цикл
		Если  ТекСтрока.Обработать Тогда
			ДокР = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ДокР.Автор = ПараметрыСеанса.ТекущийПользователь;
			ДокР.Валюта = Справочники.Валюты.НайтиПоКоду();
			ДокР.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду();
			ДокР.Грузоотправитель = "";
			ДокР.Дата = "";
			ДокР.Номер = "";
			ДокР.Комментарий = "Создано по продажам с сайта SelSup";
			ДокР.Контрагент = "";
			ДокР.Соглашение = "";
			ДокР.Менеджер = "";
			ДокР.Склад = "";
			ДокР.Соглашение = "";
			ТоварыР = ДокР.Товары.Добавить();
			ТоварыР.Номенклатура = ТекСтрока.Номенклатура;
			ТоварыР.ВидЦены = "";
			ТоварыР.Цена = ТекСтрока.Цена;
			ТоварыР.СтавкаНДС = "";
			ТоварыР.СуммаНДС = "";
			ТоварыР.Количество = ТекСтрока.Заказано;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗаказыПокупателей() Экспорт   
	
		
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой" Тогда
		
		СформироватьЗаказыПокупателейУНФ(); 
		
	Иначе
		
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда 
			
			Сообщить("Заполните организацию на закладке настроек справочников!");
			Возврат; 
			
		КонецЕсли;   		
 
		
		ЕстьОшибка = Ложь;   		
		Если ЭтотОбъект.Склады.Количество() = 0 Тогда
			
			Сообщить("Заполните склады на закладке настроек справочников!");
			ЕстьОшибка = Истина;
			
		Иначе
						
			КопияЗаказы = ЭтотОбъект.Заказы.Выгрузить();
			КопияЗаказы.Свернуть("Обработать, НомерЗаказа, warehouseId");   
			
			Для каждого СтрокаЗаказа Из КопияЗаказы Цикл 
				
				Если Не СтрокаЗаказа.Обработать Тогда
					Продолжить;
				КонецЕсли;
				
				Отбор = Новый Структура();
				Отбор.Вставить("warehouseId", СтрокаЗаказа.warehouseId);
				Строки = ЭтотОбъект.Склады.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					Если Не ЗначениеЗаполнено(Строки[0].Склад) Тогда
						Сообщить("По заказу '" + СтрокаЗаказа.НомерЗаказа + "' для склада '" + Строки[0].НаименованиеСклада + "' не заполнена колонка 'Склад' на закладке настроек справочников!");
						ЕстьОшибка = Истина;
					КонецЕсли; 
				Иначе
					Сообщить("По заказу '" + СтрокаЗаказа.НомерЗаказа + "' нет заполненных складов на закладке настроек справочников!");
					ЕстьОшибка = Истина;					
				КонецЕсли;
     				
			КонецЦикла; 
			
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			Возврат; 			
		КонецЕсли;
		
		
		ТЗЗаказов = ЭтотОбъект.Заказы.Выгрузить();
		ТЗЗаказов.Сортировать("ДатаСоздания, НомерЗаказа"); 
		
		Если ЭтотОбъект.ИспользоватьРасширеннуюНастройкуЗаказов Тогда 
			
			ЕстьОшибка = Ложь;
			КопияТЗЗаказов = ЭтотОбъект.Заказы.Выгрузить();
			КопияТЗЗаказов.Свернуть("Маркетплейс");   
			МассивМаркетплейсов = КопияТЗЗаказов.ВыгрузитьКолонку("Маркетплейс");
			
			Для каждого ЭлементМассива Из МассивМаркетплейсов Цикл  
				
				Отбор = Новый Структура();
				Отбор.Вставить("Маркетплейс", ЭлементМассива);
				НайденныеСтроки = ЭтотОбъект.РасширеннаяНастройкаЗаказов.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Маркетплейс)
						ИЛИ НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Контрагент)
						ИЛИ НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Соглашение) 
						ИЛИ НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Договор) Тогда
						ЕстьОшибка = Истина;
					КонецЕсли;    
				Иначе
					ЕстьОшибка = Истина;	
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЕстьОшибка Тогда
				Сообщить("Заполните значения колонок 'Маркетплейс','Контрагент', 'Соглашение', 'Договор' в табличной части на закладке настроек заказов!");
				Возврат;
			КонецЕсли;	
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбКонтрагент) 
				ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСоглашение) 
				ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбДоговор) Тогда 
				
				Сообщить("Заполните реквизиты документов на закладке настроек заказа!");
				Возврат; 
				
			КонецЕсли;
			
		КонецЕсли;
			
		СвойствоСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","статусSelSup");
		СвойствоПредельнаяДатаСборки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПредельнаяДатаСборки");
		СтруктураДопСвойств = Новый Структура("СвойствоСтатус, СвойствоПредельнаяДатаСборки", СвойствоСтатус, СвойствоПредельнаяДатаСборки);
		
		Д = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
		
		НомерЗаказаСтар = Неопределено;
		ДокЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();	
		
		Для Каждого ТекТовар Из ЭтотОбъект.Заказы Цикл
			
			Если ТекТовар.Обработать = Ложь Тогда
				Продолжить;
			КонецЕсли;  
			
			Если Не (ТекТовар.СтатусЗаказа = "Новый"
				ИЛИ ТекТовар.СтатусЗаказа = "На сборке" 
				ИЛИ ТекТовар.СтатусЗаказа = "Отменен покупателем"
				ИЛИ ТекТовар.СтатусЗаказа = "Ожидает оплаты") Тогда  
				Сообщить("По строке '" + ТекТовар.НомерСтроки + "' по статусу заказа '" + ТекТовар.СтатусЗаказа + "' заказ '" + ТекТовар.НомерЗаказа + "' не может быть сформирован!");
				Продолжить;
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ЭтотОбъект.ВыбНомерЗаказа)
			//	И ЭтотОбъект.ВыбНомерЗаказа <> ТекТовар.НомерЗаказа Тогда
			//	Продолжить;
			//КонецЕсли; 
			
			// Заполняем ВыбСкладРеал
			Отбор = Новый Структура();
			Отбор.Вставить("warehouseId", ТекТовар.warehouseId);
			Строки = ЭтотОбъект.Склады.НайтиСтроки(Отбор);
			Если Строки.Количество() > 0 Тогда
				ЭтотОбъект.ВыбСкладРеал = Строки[0].Склад; 
			Иначе
				ЭтотОбъект.ВыбСкладРеал = Неопределено;
			КонецЕсли;
			
			Если ТекТовар.НомерЗаказа <> НомерЗаказаСтар Тогда
				
				Если ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда // заказ уже есть в базе
					ДокЗаказКлиента =  ТекТовар.ЗаказКлиента.ПолучитьОбъект();
				Иначе                                               // новый заказ 
					
					ДокЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент(); 
					//шапка документа
					ДокЗаказКлиента.Дата = ТекТовар.ДатаСоздания; 
					ДокЗаказКлиента.Организация = ЭтотОбъект.Организация; 
					
					Если ЭтотОбъект.ИспользоватьРасширеннуюНастройкуЗаказов Тогда  					
						Отбор = Новый Структура();
						Отбор.Вставить("Маркетплейс", ТекТовар.Маркетплейс);
						НайденныеСтроки = ЭтотОбъект.РасширеннаяНастройкаЗаказов.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() > 0 Тогда
							ДокЗаказКлиента.Контрагент  = НайденныеСтроки[0].Контрагент;  
							ДокЗаказКлиента.Соглашение  = НайденныеСтроки[0].Соглашение;	 
							ДокЗаказКлиента.Договор     = НайденныеСтроки[0].Договор;
						КонецЕсли;    	
					Иначе
						ДокЗаказКлиента.Контрагент  = ЭтотОбъект.ВыбКонтрагент;  
						ДокЗаказКлиента.Соглашение  = ЭтотОбъект.ВыбСоглашение;  
						ДокЗаказКлиента.Договор     = ЭтотОбъект.ВыбДоговор;
					КонецЕсли;   
					
					ДокЗаказКлиента.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(); 	
					Если ВидОперацииЗК = "Реализация" Тогда
						ДокЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;  
					Иначе
						ДокЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;  
					КонецЕсли; 
					
					КонтрМаркетплейс = ЭтотОбъект.ВыбКонтрагент; 
					ДокЗаказКлиента.СпособДоставки = ЭтотОбъект.СпособДоставки; //Перечисления.СпособыДоставки.Самовывоз;
					
					Если ЗначениеЗаполнено(КонтрМаркетплейс) Тогда
						ДокЗаказКлиента.Партнер = КонтрМаркетплейс.Партнер;
					КонецЕсли;  
					
					ДокЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
					ДокЗаказКлиента.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
					
					ДокЗаказКлиента.Автор                = ""; 
					ДокЗаказКлиента.Склад                = ЭтотОбъект.ВыбСкладРеал; 
									
					ДокЗаказКлиента.ЦенаВключаетНДС      = ЭтотОбъект.ЦенаВключаетНДС;
					ДокЗаказКлиента.НалогообложениеНДС   = ЭтотОбъект.НалогообложениеНДС;  
					ДокЗаказКлиента.Менеджер             = ЭтотОбъект.ВыбМенеджер;
					ДокЗаказКлиента.НомерПоДаннымКлиента = ТекТовар.НомерОтправления;   
					ДокЗаказКлиента.ПорядокОплаты        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокЗаказКлиента.Договор, "ПорядокОплаты");
					
					Если Не ЗначениеЗаполнено(ДокЗаказКлиента.Комментарий) Тогда
						ДокЗаказКлиента.Комментарий = "Создан автоматически по заказам на SelSup";
					КонецЕсли;  
					
				КонецЕсли;
				
			Иначе 
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда
				
				НоваяСтрока = ДокЗаказКлиента.Товары.Добавить();
				НоваяСтрока.Номенклатура       = ТекТовар.Номенклатура;  
				НоваяСтрока.Характеристика     = ТекТовар.Характеристика; 	
				НоваяСтрока.Упаковка           = ЭтотОбъект.ВыбУпаковка;
				НоваяСтрока.Количество         = ТекТовар.Заказано;
				НоваяСтрока.КоличествоУпаковок = ТекТовар.Заказано;
				НоваяСтрока.ДатаОтгрузки       = ТекТовар.ДатаСоздания;
				НоваяСтрока.Склад              = ЭтотОбъект.ВыбСкладРеал;  
								
				//НоваяСтрока.ВидЦены = Справочники.ВидыЦен.НайтиПоКоду();
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				НоваяСтрока.Цена = ТекТовар.Цена;
				НоваяСтрока.Сумма = ТекТовар.Заказано *  ТекТовар.Цена;
				НДС = 0;
				
				Если ЗначениеЗаполнено(ТекТовар.Номенклатура) Тогда 
					ПоискСтавкаНДС = ТекТовар.Номенклатура.СтавкаНДС;
					//СтавкаНДС = ?(ПоискСтавкаНДС = Справочники.СтавкиНДС.БезНДС, 0, Число(Лев(ПоискСтавкаНДС, 2)));  
					СтавкаНДС = 18; //TODO
					Если ЭтотОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда 
						
						НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
						НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						
					ИначеЕсли ДокЗаказКлиента.ЦенаВключаетНДС   					
						И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
						
						НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
						НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
						НоваяСтрока.СуммаНДС = НДС;      					
						
						// ндс сверху 
					ИначеЕсли Не ДокЗаказКлиента.ЦенаВключаетНДС
						И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда     					
						
						НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
						НДС = НоваяСтрока.Сумма  *( 1+СтавкаНДС/100) -НоваяСтрока.Сумма;
						НоваяСтрока.СуммаНДС = НДС; 
						НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + НДС;
						
					Иначе  // считаем, что цена с НДС
						НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
						
						ДокЗаказКлиента.ЦенаВключаетНДС = Истина;
						НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
						НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
						НоваяСтрока.СуммаНДС = НДС;
						
					КонецЕсли;
				Иначе
					НоваяСтрока.СуммаНДС = НДС;
					НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
				КонецЕсли;
				//	НоваяСтрока.Всего = НоваяСтрока.Сумма;
				
			Иначе   
				//заказ повторно не заполняем	
			КонецЕсли;
			
			// Заполняем доп реквизит статусSelSup
			СтруктураДоп = Новый Структура("статусSelSup, ПредельнаяДатаСборки");
			//ЗаполнитьДопРеквизиты(ДокЗаказКлиента, ТекТовар, СтруктураДопСвойств, СтруктураДоп );  
		
			Если ДокЗаказКлиента <> Документы.ЗаказКлиента.ПустаяСсылка() Тогда
				ЗаписатьДокумент(ДокЗаказКлиента, СтруктураДоп.статусSelSup);
				ТекТовар.ЗаказКлиента = ДокЗаказКлиента.Ссылка; 
			КонецЕсли;		
			
			НомерЗаказаСтар = ТекТовар.НомерЗаказа;	  
			
		КонецЦикла;   
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьЗаказыПокупателейУНФ() Экспорт
	
	ТЗЗаказов = ЭтотОбъект.Заказы.Выгрузить();
	ТЗЗаказов.Сортировать("ДатаСоздания, НомерЗаказа");
	СвойствоСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","статусSelSup");
	СвойствоПредельнаяДатаСборки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПредельнаяДатаСборки");
	СтруктураДопСвойств = Новый Структура("СвойствоСтатус, СвойствоПредельнаяДатаСборки", СвойствоСтатус, СвойствоПредельнаяДатаСборки);
	
	Д = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	
	НомерЗаказаСтар = Неопределено;
	ДокЗаказКлиента = Документы.ЗаказПокупателя.ПустаяСсылка();
	Для Каждого ТекТовар Из ЭтотОбъект.Заказы Цикл
		
		Если ТекТовар.Обработать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ВыбНомерЗаказа)
			И ЭтотОбъект.ВыбНомерЗаказа <> ТекТовар.НомерЗаказа Тогда
			Продолжить;
		КонецЕсли;   			 
		
		Если ТекТовар.НомерЗаказа <> НомерЗаказаСтар Тогда
			
			Если ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда // заказ уже есть в базе
				ДокЗаказКлиента =  ТекТовар.ЗаказКлиента.ПолучитьОбъект();
			Иначе                                               // новый заказ
				ДокЗаказКлиента = Документы.ЗаказПокупателя.СоздатьДокумент();
				
				ДокЗаказКлиента.Дата = ТекТовар.ДатаСоздания;
				ДокЗаказКлиента.Организация = ЭтотОбъект.Организация;
				ДокЗаказКлиента.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
				
				ДокЗаказКлиента.Контрагент = ЭтотОбъект.ВыбКонтрагент;
				ДокЗаказКлиента.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				
				ДокЗаказКлиента.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
				ДокЗаказКлиента.Курс = 1;
				ДокЗаказКлиента.Кратность = 1;
				ДокЗаказКлиента.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
				ДокЗаказКлиента.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЗаказНаПродажу;
				КонтрМаркетплейс = ЭтотОбъект.ВыбКонтрагент; 
				ДокЗаказКлиента.Контрагент = КонтрМаркетплейс;
				ДокЗаказКлиента.СпособДоставки = ЭтотОбъект.СпособДоставки;
				ДокЗаказКлиента.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе");
				
				ДокЗаказКлиента.Автор = "";
				ДокЗаказКлиента.НДСВключатьВСтоимость = ЭтотОбъект.ЦенаВключаетНДС;
				ДокЗаказКлиента.НалогообложениеНДС = ЭтотОбъект.НалогообложениеНДС;
				ДокЗаказКлиента.Договор = ЭтотОбъект.ВыбСоглашение;
				ДокЗаказКлиента.НомерВходящегоДокумента = ТекТовар.НомерОтправления;
				Если Не ЗначениеЗаполнено(ДокЗаказКлиента.Комментарий) Тогда
					ДокЗаказКлиента.Комментарий = "Создан автоматически по заказам на SelSup";
				КонецЕсли;  				
			КонецЕсли;
			
		Иначе 
		КонецЕсли;
		
		// ТЧ  Запасы не перезаполняем
		Если НЕ ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда
			
			НоваяСтрока = ДокЗаказКлиента.Запасы.Добавить();
			НоваяСтрока.Номенклатура =  ТекТовар.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ЭтотОбъект.ВыбЕдиницаИзмеренияУНФ;
			НоваяСтрока.Количество = ТекТовар.Заказано;
			НоваяСтрока.ДатаОтгрузки = ТекТовар.ДатаСоздания;
			НоваяСтрока.Цена = ТекТовар.Цена;
			НДС = 0;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
			НоваяСтрока.СуммаНДС =0;
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
			//Если ЭтотОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда 
			//	
			//	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			//	НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			//	
			//ИначеЕсли ДокЗаказКлиента.НДСВключатьВСтоимость   					
			//	И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			//	
			//	НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
			//	НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
			//	НоваяСтрока.СуммаНДС = НДС;      					
			//	
			//	// ндс сверху 
			//ИначеЕсли Не ДокЗаказКлиента.НДСВключатьВСтоимость
			//	И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда     					
			//	 					
			//	НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
			//	НДС = НоваяСтрока.Сумма  *( 1+СтавкаНДС/100) -НоваяСтрока.Сумма;
			//	НоваяСтрока.СуммаНДС = НДС; 
			//	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + НДС;
			//	
			//Иначе  // считаем, что цена с НДС
			//	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			//	
			//	ДокЗаказКлиента.НДСВключатьВСтоимость = Истина;
			//	НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
			//	НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
			//	НоваяСтрока.СуммаНДС = НДС;
			//	
			//КонецЕсли; 			
		Иначе   
			//заказ повторно не заполняем	
		КонецЕсли;
		
		
		ДокЗаказКлиента.СуммаДокумента = ДокЗаказКлиента.Запасы.Итог("Всего");
		// Заполняем доп реквизит статусSelSup
		СтруктураДоп = Новый Структура("статусSelSup, ПредельнаяДатаСборки");
		//ЗаполнитьДопРеквизиты(ДокЗаказКлиента, ТекТовар, СтруктураДопСвойств, СтруктураДоп );  
		//ДокЗаказКлиента.ДатаОтгрузки = СтруктураДоп.ПредельнаяДатаСборки;
		Если ДокЗаказКлиента <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			ЗаписатьДокумент(ДокЗаказКлиента, СтруктураДоп.статусSelSup);
			ТекТовар.ЗаказПокупателя = ДокЗаказКлиента.Ссылка; 
		КонецЕсли;		
		
		НомерЗаказаСтар = ТекТовар.НомерЗаказа;	
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область API_SelSup

Функция ВыполнитьТестSelSup() Экспорт
	
	Метод  = "/api/product/findProduct?page=1&limit=5";  // получим информации на 1 странице о 5 товарах
		
	Попытка
		РезультатЗапроса = ЭтотОбъект.ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка товаров возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОТоварах(ПараметрыПодключения, Страница)
		
	Метод  = "/api/product/findProduct?query=" + ПараметрыПодключения.TextQuery + "&page=" + Страница;
	
	Если Не ПустаяСтрока(ПараметрыПодключения.Services) Тогда 
		Если СтрНайти(Метод, "?") = 0 Тогда
			Метод = Метод + "?" + Сред(ПараметрыПодключения.Services, 2);
		Иначе	
			Метод = Метод + ПараметрыПодключения.Services;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении товара возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса; 
	
КонецФункции 

Функция ИнформацияОМаркетплейсах(Страница)
	
	
	Метод  = "/api/knowledge/getApplicationData?limit=200&ascending=true&count=true&page=" + Страница;		
		
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка маркетплейсов возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОбОрганизациях(Страница)
	
	
	Метод  = "/api/client/findClientOrganization?limit=200&ascending=true&count=true&page=" + Страница;		
		
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка организаций возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОСкладах(Страница)
	
	
	Метод  = "/api/warehouse/getWarehouses?limit=200&ascending=true&count=true&page=" + Страница;			
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка организаций возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции 

Функция ИнформацияОСкладахONE_C(Страница)
	
	
	Метод  = "/api/warehouse/getWarehouses?service=ONE_C&limit=200&ascending=true&count=true&page=" + Страница;			
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка организаций возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОСтокахТоваров(Вариант, Страница)
		
	Метод  = "/api/wms/findStock?limit=200&ascending=true&count=true&page=" + Страница;			
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка товаров возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОТоварахНаУпаковку(barcode)
	
	
	Метод  = "/api/fbs/findOrderByProductBarcode?barcode=" + barcode;		
		
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка позиций в заказе возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции    

Функция УкомплектоватьЗаказ(invoiceNumber, orderId) Экспорт
		
	//Метод  = "/api.selsup.ru/api/fbs/packOrder?orderId=" + orderId; 
	//		
	//Попытка
	//	РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, , "POST"); 	
	//	Если РезультатЗапроса = Неопределено Тогда
	//		Сообщить("Не удалось укомплектовать заказ " + orderId + "."); 
	//		Возврат Ложь;
	//	Иначе
	//		Сообщить("Заказ " + orderId + " укомплектован.");
	//	КонецЕсли;
	//Исключение
	//	СообщитьОбОшибке("При комплектации заказа возникла ошибка: " + ОписаниеОшибки());  
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//Возврат Истина;  
	
	Сообщить("Заказ " + invoiceNumber + " укомплектован.");
    Возврат Истина;
	
КонецФункции

Процедура УстановитьОстатки(МассивТоваров) Экспорт
		
	Метод  = "/api/wms/changeStockByServiceWarehouse?service=ONE_C";  
		
	params = Новый Массив;
	
	Для каждого ТекСтр Из МассивТоваров Цикл
	
		СтруктураТовара = Новый Структура;     
		//СтруктураТовара.Вставить("serviceProductId", Строка(ТекСтр.Номенклатура.УникальныйИдентификатор()));  //TODO 
		СтруктураТовара.Вставить("serviceProductId", "R" + СОКРЛП(ТекСтр.Номенклатура.Код) + "#R" + СОКРЛП(ТекСтр.Номенклатура.Код) + "_"+ СОКРЛП(ТекСтр.Характеристика));  
		СтруктураТовара.Вставить("serviceWarehouseId",Строка(ТекСтр.Склад.УникальныйИдентификатор())); 
		СтруктураТовара.Вставить("stock",	 ТекСтр.Остаток1С);
		params.Добавить(СтруктураТовара);
		
	КонецЦикла;
	
	json = Новый Структура;
	json.Вставить("params", params);   
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Лев(ТекстЗапроса, 13), "");
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-3);
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 	
		Если Не РезультатЗапроса = Неопределено Тогда
			Сообщить("Остатки обновлены."); 
			ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Информация, , , "Остатки обновлены."); //todo 
		КонецЕсли;
	Исключение                                                              
		ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Ошибка, , , "При установке остатков товаров возникла ошибка: " + ОписаниеОшибки());
		СообщитьОбОшибке("При установке остатков товаров возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСвязьСоСкладом(ТекСклад) Экспорт
		
	Метод  = "/api/warehouse/createServiceWarehouse"; 
	
	json = Новый Структура;  
	json.Вставить("name", ТекСклад.НаименованиеСклада); 
	json.Вставить("externalId", Строка(ТекСклад.Склад.УникальныйИдентификатор()));
	json.Вставить("warehouseId", ТекСклад.ID_SelSup); //TODO????
	json.Вставить("service", "ONE_C"); 
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Организация);  
	Строки = ЭтотОбъект.Организации.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		json.Вставить("organizationId", Строки[0].ID_SelSup);
    КонецЕсли;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
		
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 
		Если Не РезультатЗапроса = Неопределено
			И ТекСклад.НаименованиеСклада = РезультатЗапроса.name Тогда
			Сообщить("Склады с наименованием """ + ТекСклад.НаименованиеСклада +""" связаны.");
		КонецЕсли;	
	Исключение
		СообщитьОбОшибке("При установке связи складов возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура Sleepy(ЗадержкаСекунд = 10) 
		
	Скрипт = Новый ТекстовыйДокумент(); 
	Скрипт.УстановитьТекст 
	( 
	"if (WScript.Arguments.Count()==0) 
	| WScript.Quit(); 
	|else 
	| if (isNaN(parseInt(WScript.Arguments(0)))) 
	| WScript.Quit(); 
	|WScript.Sleep(WScript.Arguments(0));" 
	); 
	Скрипт.Записать(КаталогВременныхФайлов()+"sleep.js", КодировкаТекста.ANSI); 
	WshShell = Новый COMОбъект("wscript.shell"); 
	WshShell.Run("wscript.exe """+КаталогВременныхФайлов()+"sleep.js"" "+Формат(ЗадержкаСекунд*1000,"ЧГ=0"), 0, -1); 
	УдалитьФайлы(КаталогВременныхФайлов()+"sleep.js");  
		
КонецПроцедуры
		
Процедура ОбновитьЭтикеткиЗаказов() Экспорт  
		
	Метод  = "/api/fbs/updateLabels";  
	
	ids = Новый Массив();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Заказы Цикл
		Если СтрокаТаблицы.Обработать 
			И ids.Найти(СтрокаТаблицы.IDЗаказа) = Неопределено Тогда
			ids.Добавить(СтрокаТаблицы.IDЗаказа);		
		КонецЕсли;		
	КонецЦикла; 
	
	Если ids.Количество() = 0 Тогда 
		СообщитьОбОшибке("Нет данных для обновления этикеток выбранных заказов. Заказы не выбраны.");
		Возврат;
	КонецЕсли;	
	
	json = Новый Структура;
	json.Вставить("ids", ids);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Лев(ТекстЗапроса, 10), "");
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-3);  
		
	Попытка
		
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 
		Если Не РезультатЗапроса = Неопределено Тогда
			Сообщить("Этикетки заказов с маркетплейса обновлены.");
		КонецЕсли;
		
	Исключение
		СообщитьОбОшибке("Обновление этикеток заказов с маркетплейса по указанному фильтру возникла ошибка: " + ОписаниеОшибки()); 
	КонецПопытки;   
	
КонецПроцедуры  

Процедура ПечатьЗаказов() Экспорт  
		   		
	ids = Новый Массив();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Заказы Цикл
		Если СтрокаТаблицы.Обработать 
			И ids.Найти(СтрокаТаблицы.IDЗаказа) = Неопределено Тогда
			ids.Добавить(СтрокаТаблицы.IDЗаказа);		
		КонецЕсли;		
	КонецЦикла; 	
	
	НапечататьЭтикетки(ids);   
	
КонецПроцедуры  

Процедура НапечататьЭтикетки(ids) Экспорт 
	
	Массив_IDS = Новый Массив();
	Если ТипЗнч(ids) = Тип("Число") Тогда
		Массив_IDS.Добавить(ids);  
	Иначе
		Массив_IDS = ids;
	КонецЕсли;	
			
	Если Массив_IDS.Количество() = 0 Тогда 
		СообщитьОбОшибке("Нет данных для печати этикеток выбранных заказов.");
		Возврат;
	КонецЕсли;   
		
	Метод  = "/api/fbs/downloadLabels";
			
	json = Новый Структура;
	json.Вставить("ids", Массив_IDS);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	Попытка
		
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST");  
		
		Пока Истина Цикл   
			
			Sleepy(10);
			
			Метод  = "/api/task/getTask?filter=" + РезультатЗапроса.id; 
			
			РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
			Если РезультатЗапроса.status = "FINISHED" Тогда
				ЗагрузитьPDF(РезультатЗапроса.file);
				Прервать;
			ИначеЕсли РезультатЗапроса.status = "ERROR" Тогда
				СообщитьОбОшибке("Этикетки не найдены."); 
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		СообщитьОбОшибке("При скачивании PDF файла со списком этикеток всех заказов по указанному фильтру возникла ошибка: " + ОписаниеОшибки()); 
	КонецПопытки;   
	
КонецПроцедуры  

Процедура ЗагрузитьPDF(ИмяФайла)  
	
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталог);
	
	Адрес = UrlSelSup + "/files/file?path=" + ИмяФайла;
	
	ПутьДляСохранения = ВременныйКаталог + ИмяФайла;  
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения); 	
	ЗагруженныйФайл = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	Если Не ЗагруженныйФайл.Статус Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
		ВызватьИсключение ЗагруженныйФайл.СообщениеОбОшибке;
	КонецЕсли;
	
	ЗапуститьПриложение(ЗагруженныйФайл.Путь);	
	//ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог); //TODO - или это постоянный каталог ???
	
	ПутьЗагруженногоФайла = ЗагруженныйФайл.Путь; 
		
КонецПроцедуры  

Функция ОтправленияСоСкладаПродавца(Страница)
	
	СтатусОтправления0 = "CREATED";
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатусОтправления) Тогда		
		СтатусОтправления0 = "&status=" + ПолучитьСтатусОтправления();		
	КонецЕсли; 
		
	Маркетплейс0 = "";
	Если ЗначениеЗаполнено(ЭтотОбъект.Маркетплейс) Тогда		
		Маркетплейс0 = "&service=" + ЭтотОбъект.Маркетплейс;		
	КонецЕсли; 
	
	//&type=FBS //TODO
	Метод  = "/api/fbs/findOrder?" + СтатусОтправления0 + Маркетплейс0 + "&type=FBS&deliveryDate=" + Формат(ЭтотОбъект.ДатаДоставки, "ДФ=yyyy-MM-dd" ) + "&sortBy=CREATED&limit=500&ascending=true&count=true&page=" + Страница;
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка товаров возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса; 	
	
КонецФункции

Функция ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса = Неопределено, ТипЗапроса = "GET") Экспорт
	
	Сервер = UrlSelSup; 
	
	Заголовки = Новый Соответствие;
    Заголовки.Вставить("Host", 		    Сервер);
	Заголовки.Вставить("Authorization", ЭтотОбъект.ApiKey);
	Заголовки.Вставить("Content-type", 	"application/json");
	
	Запрос = Новый HTTPЗапрос(Метод, Заголовки);
	Если ТекстЗапроса <> Неопределено  Тогда // без тела запроса (параметров)
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);  // с телом запроса (параметров)
	КонецЕсли; 
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Соединение 	 		 = Новый HTTPСоединение(Сервер, , , , , , ЗащищенноеСоединение);
	//Соединение 	 		 = Новый HTTPСоединение(Сервер, , , , , , );
		
	Если ТипЗапроса = "GET" Тогда
		Ответ = Соединение.Получить(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ТипЗапроса = "POST" Тогда 
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ТипЗапроса = "DELETE" Тогда 
		Ответ = Соединение.Удалить(Запрос);  
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	Иначе
		СтрокаОтвета = "Попытка использования нереализованного метода";
	КонецЕсли; 	
	
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибке("Ошибка при подключении к API: " + СтрокаОтвета); 
		ЗаписьЖурналаРегистрации("ИнтеграцияСSelSup.ОбновлениеОстатковНаСайте", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка при подключении к API: " + СтрокаОтвета);   //TODO
		Возврат Неопределено;
	КонецЕсли; 
	
	СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "{""currencyRates"":{},""warehouses"":", "");
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON, Ложь);
	
	Возврат СтруктураОтвета; 
	
КонецФункции
#КонецОбласти

#Область Заполнение1С
Процедура ЗагрузитьКартинку(Адрес, ИмяФайла)  
	
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталог);
	
	ПутьДляСохранения = ВременныйКаталог + ИмяФайла;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения); 	
	ЗагруженныйФайл = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	Если Не ЗагруженныйФайл.Статус Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
		ВызватьИсключение ЗагруженныйФайл.СообщениеОбОшибке;
	КонецЕсли;
	
	//ЗапуститьПриложение(ЗагруженныйФайл.Путь);
	//ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
	
КонецПроцедуры

Процедура ЗаполнитьОстатки(СтрокаТЧ)
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда
		ЗаполнитьОстаткиУНФ(СтрокаТЧ);
	Иначе
		//ЗаполнитьОстаткиERP(СтрокаТЧ);
		ЗаполнитьОстаткиПоРаспределениюЗапасов(СтрокаТЧ); //TODO - нужен шаблон
	КонецЕсли
	
КонецПроцедуры

Процедура СоздатьНоменклатуру(СтрокаТЧ) Экспорт
		
	НовыйТовар=Справочники.Номенклатура.СоздатьЭлемент();
	НовыйТовар.НаименованиеПолное = СтрокаТЧ.НаименованиеТовара; 
	НовыйТовар.Наименование = СтрокаТЧ.НаименованиеТовара; 
	НовыйТовар.Артикул = СтрокаТЧ.Артикул;    
	НовыйТовар.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	НовыйТовар.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");  
	НовыйТовар.Качество = Перечисления.ГрадацииКачества.Новый;
	НовыйТовар.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("шт"); 
	НовыйТовар.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Загрузка"); 
	НовыйТовар.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("Прочее");
	НовыйТовар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	НовыйТовар.ИспользованиеХарактеристик = Ложь;
	
	
	Попытка
		
		НовыйТовар.Записать () ; // запишем новый наш товар  
		
		ШтрихКод = СтрокаТЧ.ШтрихКод; 
		
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			
			НоваяЗапись = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			НоваяЗапись.Штрихкод = Штрихкод;
			НоваяЗапись.Номенклатура = НовыйТовар.Ссылка;
			//НоваяЗапись.Характеристика = Характеристика;
			
			НоваяЗапись.Записать(Истина); 
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = НовыйТовар.Ссылка;  
		
		Сообщить ("Cоздан товар: "+СтрокаТЧ.НаименованиеТовара+", артикул: "+СтрокаТЧ.Артикул); 
		
	Исключение   
		Сообщить ("Не создан товар: "+СтрокаТЧ.НаименованиеТовара+", артикул: "+СтрокаТЧ.Артикул + ". " + ОписаниеОшибки());  
	КонецПопытки; 
		
КонецПроцедуры

Процедура ЗаполнитьНоменклатуру(СтрокаТЧ, ЭтоЗаказ = Неопределено)  
	
	//Выборка = НайтиНоменклатуруERP(СтрокаТЧ);
	//Если  ЭтоЗаказ = Истина тогда       
		Если ЗначениеЗаполнено(СтрокаТЧ.ШтрихКод) Тогда
			Выборка = НайтиНоменклатуруERPПоШтрихКоду(СтрокаТЧ.ШтрихКод, СтрокаТЧ, ЭтоЗаказ);   
			Если Выборка.Количество() = 0 Тогда 
				Выборка = НайтиНоменклатуруERPПоID(СтрокаТЧ.Артикул, СтрокаТЧ, ЭтоЗаказ); 
			КонецЕсли;
		Иначе
			Выборка = НайтиНоменклатуруERPПоID(СтрокаТЧ.Артикул, СтрокаТЧ, ЭтоЗаказ); 
		КонецЕсли;
	//Иначе
	//	Выборка = НайтиНоменклатуруERPПоID(СтрокаТЧ.ID, СтрокаТЧ, ЭтоЗаказ);
	//конецЕсли;
	Если Выборка.Количество() = 0 Тогда
		
		СтрокаТЧ.ЕстьОшибка 	= Истина;
		СтрокаТЧ.ОписаниеОшибки = "Товар не найден!";
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 1 Тогда
		
		СтрокаТЧ.ЕстьОшибка 	= Истина;
		СтрокаТЧ.ОписаниеОшибки = "Найдено несколько товаров с одинаковым идентификатором!";
		Возврат;
		
	КонецЕсли;
	
	Выборка.Следующий();
	
	СтрокаТЧ.Номенклатура = Выборка.Ссылка;
	
КонецПроцедуры

Функция НайтиНоменклатуруERP(СтрокаТЧ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &ID
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";
	
	Запрос.Текст = ТекстЗапроса;  	
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Артикул", "Номенклатура.Код"); 
		Запрос.УстановитьПараметр("ID", 			 СтрокаТЧ.Артикул);  
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);   				
	Иначе                
		Запрос.УстановитьПараметр("ID", 			 СтрокаТЧ.ID); 
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция НайтиНоменклатуруERPПоID(IDТовар, ВыбСтрока, ЭтоЗаказ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &ID
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";
	
	Запрос.Текст = ТекстЗапроса; 
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Артикул", "Номенклатура.Код"); 
		Запрос.УстановитьПараметр("ID", 			 IDТовар);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		
	Иначе
		Запрос.УстановитьПараметр("ID", 			IDТовар); 
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		//Если ЭтоЗаказ = Истина Тогда
			Сообщить ("Не найден товар: "+ВыбСтрока.НаименованиеТовара+", артикул: "+ВыбСтрока.Артикул);  //ВыбСтрока.ID
		//Иначе
		//	Сообщить ("Не найден товар, артикул: "+ВыбСтрока.ID); 
		//КонецЕсли;
		
		Возврат Выборка ; //Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;        	
	
КонецФункции  

Функция НайтиНоменклатуруERPПоШтрихКоду(ШтрихКодТовар, ВыбСтрока, ЭтоЗаказ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Ссылка,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И НЕ ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления
	|	И ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";    
 
	
	Запрос.Текст = ТекстЗапроса; 
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Артикул", "Номенклатура.Код"); 
		Запрос.УстановитьПараметр("ШтрихКод", 		ШтрихКодТовар);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		
	Иначе
		Запрос.УстановитьПараметр("ШтрихКод", 		 ШтрихКодТовар); 
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Если ЭтоЗаказ = Истина Тогда
			Сообщить ("Не найден товар: "+ВыбСтрока.НаименованиеТовара+", штрих-код: "+ВыбСтрока.ШтрихКод);  //ВыбСтрока.ШтрихКод
		Иначе
			Сообщить ("Не найден товар, штрих-код: "+ВыбСтрока.ШтрихКод); 
		КонецЕсли;
		
		Возврат Выборка ; //Справочники.Номенклатура.ПустаяСсылка();  
		
	КонецЕсли;        	
	
КонецФункции

Функция ПолучитьТаблицуОстатков(СкладыONEC)  
		 		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	СУММА(ТоварыКОтгрузке.ВРезерве) КАК ВРезерве,
	|	ТоварыКОтгрузке.Получатель КАК Получатель,
	|	СУММА(ТоварыКОтгрузке.КОтгрузке) КАК КОтгрузке,
	|	ТоварыКОтгрузке.Склад КАК Склад
	|ПОМЕСТИТЬ ВТ_Итоговая
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|	И ТоварыКОтгрузке.ДокументОтгрузки.к_ВиртуальныйРезерв
	|	И ТоварыКОтгрузке.Получатель ССЫЛКА Справочник.Партнеры
	|	И ТоварыКОтгрузке.Получатель = &ПартнерИМ
	|	И ТоварыКОтгрузке.Склад В(&СкладыONEC)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.ДокументОтгрузки,
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Получатель,
	|	ТоварыКОтгрузке.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Назначение.Заказ,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток),
	|	ТоварыНаСкладахОстатки.Назначение.Заказ.Партнер,
	|	NULL,
	|	ТоварыНаСкладахОстатки.Склад
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Назначение.Заказ.к_ВиртуальныйРезерв
	|				И Склад В (&СкладыONEC)
	|				И Назначение.Заказ.Партнер = &ПартнерИМ) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Назначение.Заказ,
	|	ТоварыНаСкладахОстатки.Назначение.Заказ.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итоговая.Номенклатура КАК Номенклатура,
	|	ВТ_Итоговая.Характеристика КАК Характеристика,
	|	СУММА(ЕСТЬNULL(ВТ_Итоговая.ВРезерве, 0) + ЕСТЬNULL(ВТ_Итоговая.КОтгрузке, 0)) КАК Количество,
	|	ВТ_Итоговая.Склад КАК Склад
	|ПОМЕСТИТЬ ВТ_ОстатокВиртуальногоРезерва
	|ИЗ
	|	ВТ_Итоговая КАК ВТ_Итоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итоговая.Номенклатура,
	|	ВТ_Итоговая.Характеристика,
	|	ВТ_Итоговая.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток) КАК Остаток1С,
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика КАК Характеристика,
	|	СвободныеОстаткиОстатки.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			НЕ Номенклатура.ПометкаУдаления
	|				И Склад В (&СкладыONEC)
	|				И НЕ Характеристика.ПометкаУдаления
	|				И НЕ Склад.ПометкаУдаления) КАК СвободныеОстаткиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстаткиОстатки.Номенклатура,
	|	СвободныеОстаткиОстатки.Характеристика,
	|	СвободныеОстаткиОстатки.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВТ_ОстатокВиртуальногоРезерва.Количество),
	|	ВТ_ОстатокВиртуальногоРезерва.Номенклатура,
	|	ВТ_ОстатокВиртуальногоРезерва.Характеристика,
	|	ВТ_ОстатокВиртуальногоРезерва.Склад
	|ИЗ
	|	ВТ_ОстатокВиртуальногоРезерва КАК ВТ_ОстатокВиртуальногоРезерва
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОстатокВиртуальногоРезерва.Номенклатура,
	|	ВТ_ОстатокВиртуальногоРезерва.Характеристика,
	|	ВТ_ОстатокВиртуальногоРезерва.Склад";   
	
	//|ГДЕ
	//|	СвободныеОстаткиОстатки.ВНаличииОстаток - СвободныеОстаткиОстатки.ВРезервеСоСкладаОстаток - СвободныеОстаткиОстатки.ВРезервеПодЗаказОстаток > 0

	
	//ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	//|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) - ЕСТЬNULL(СвободныеОстатки.Резерв, 0) КАК Остаток1С,
	//|	СвободныеОстатки.Характеристика КАК Характеристика,
	//|	СвободныеОстатки.Склад КАК Склад
	//|ИЗ
	//|	Справочник.Номенклатура КАК СправочникНоменклатура
	//|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//|			РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	//|			СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
	//|			СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
	//|			СУММА(РаспределениеЗапасов.Резерв) КАК Резерв,
	//|			РаспределениеЗапасов.Характеристика КАК Характеристика,
	//|			РаспределениеЗапасов.Склад КАК Склад
	//|		ИЗ
	//|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	//|		ГДЕ
	//|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	//|			И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	//|			И РаспределениеЗапасов.Склад В(&СкладыONEC)
	//|		
	//|		СГРУППИРОВАТЬ ПО
	//|			РаспределениеЗапасов.Номенклатура,
	//|			РаспределениеЗапасов.Характеристика,
	//|			РаспределениеЗапасов.Склад) КАК СвободныеОстатки
	//|		ПО СправочникНоменклатура.Ссылка = СвободныеОстатки.Номенклатура
	//|ГДЕ
	//|	НЕ СвободныеОстатки.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	//|";
	
	Если Не ЗначениеЗаполнено(СкладыONEC) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Склад В (&СкладыONEC)", "");  
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ТоварыКОтгрузке.Склад В(&СкладыONEC)", ""); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РаспределениеЗапасов.Склад В(&СкладыONEC)", "");  //TODO - Шаблон
	КонецЕсли;  
	
	Запрос = Новый Запрос(ТекстЗапроса);	 
	Запрос.УстановитьПараметр("ПартнерИМ",Справочники.Партнеры.НайтиПоНаименованию("ДАЛЛИ-СЕРВИС ООО"));  
	Запрос.УстановитьПараметр("СкладыONEC", СкладыONEC);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьОстаткиПоРаспределениюЗапасов(СтрокаТЧ)
	
	Если СтрокаТЧ.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК Количество,
	|	ЕСТЬNULL(СвободныеОстатки.Резерв, 0) КАК КоличествоРезерв1С
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|			СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
	|			СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
	|			СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
	|		ИЗ
	|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ГДЕ
	|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|			И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И РаспределениеЗапасов.Склад = &Склад
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспределениеЗапасов.Номенклатура) КАК СвободныеОстатки
	|		ПО СправочникНоменклатура.Ссылка = СвободныеОстатки.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура";
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСклад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РаспределениеЗапасов.Склад = &Склад", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", 	 СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Склад",			 ЭтотОбъект.ВыбСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		СтрокаТЧ.Остаток1С = Выборка.Количество;
		СтрокаТЧ.РазницаСвободный = СтрокаТЧ.ОстатокSelSup - СтрокаТЧ.Остаток1С; 
		СтрокаТЧ.РазницаСРезервом = (СтрокаТЧ.ОстатокSelSup+СтрокаТЧ.ОжидаетсяКПоставкеSelSup+СтрокаТЧ.ВРезервеSelSup) - (Выборка.Количество+Выборка.КоличествоРезерв1С); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиERP(СтрокаТЧ)
	
	Если СтрокаТЧ.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Набор.Номенклатура КАК Номенклатура,
	|	СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеСоСклада) - СУММА(Набор.ВРезервеПодЗаказ) - СУММА(Набор.КОтгрузке) КАК Количество,
	|	СУММА(Набор.ВРезервеСоСклада) + СУММА(Набор.ВРезервеПодЗаказ) + СУММА(Набор.КОтгрузке) КАК КоличествоРезерв1С
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.ВНаличииОстаток КАК ВНаличии,
	|		Таблица.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
	|		Таблица.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ,
	|		0 КАК КОтгрузке
	|	ИЗ
	|		РегистрНакопления.СвободныеОстатки.Остатки(
	|				,
	|				Номенклатура = &Номенклатура
	|					И Склад = &Склад) КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.КОтгрузкеОстаток,
	|		0,
	|		0,
	|		Таблица.КОтгрузкеОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				,
	|				Номенклатура = &Номенклатура
	|					И Склад = &Склад) КАК Таблица) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура";
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСклад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Склад = &Склад", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", 	 СтрокаТЧ.Номенклатура);
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 		
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);		
	Иначе
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	КонецЕсли;
	
	//Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	Запрос.УстановитьПараметр("Склад",			 ЭтотОбъект.ВыбСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаТЧ.Остаток1С = Выборка.Количество;
		СтрокаТЧ.РазницаСвободный = СтрокаТЧ.ОстатокSelSup - СтрокаТЧ.Остаток1С; 
		СтрокаТЧ.РазницаСРезервом = (СтрокаТЧ.ОстатокSelSup+СтрокаТЧ.ОжидаетсяКПоставкеSelSup+СтрокаТЧ.ВРезервеSelSup) - (Выборка.Количество+Выборка.КоличествоРезерв1С); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиУНФ(СтрокаТЧ)
	
	Если СтрокаТЧ.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.ЗаказПокупателя КАК Заказ,
	|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Резерв1С,
	|	0 КАК ЗаказаноПокупателями,
	|	ЗапасыОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|				И Номенклатура = &Номенклатура
	|				И СтруктурнаяЕдиница = &Склад) КАК ЗапасыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяОстатки.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	ЗаказПокупателяОстатки.Номенклатура,
	|	ЗаказПокупателяОстатки.Характеристика,
	|	ЗаказПокупателяОстатки.ЗаказПокупателя,
	|	0,
	|	0,
	|	ЗаказПокупателяОстатки.КоличествоОстаток,
	|	ЗаказПокупателяОстатки.Номенклатура.КатегорияНоменклатуры
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				И Номенклатура = &Номенклатура) КАК ЗаказПокупателяОстатки";
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСклад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СтруктурнаяЕдиница = &Склад", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", 	 СтрокаТЧ.Номенклатура);
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);		  
	Иначе
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад",			 ЭтотОбъект.ВыбСклад);   	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаТЧ.Остаток1С = Выборка.Количество;
		СтрокаТЧ.РазницаСвободный = СтрокаТЧ.ОстатокSelSup - СтрокаТЧ.Остаток1С; 
		СтрокаТЧ.РазницаСРезервом = (СтрокаТЧ.ОстатокSelSup+СтрокаТЧ.ОжидаетсяКПоставкеSelSup+СтрокаТЧ.ВРезервеSelSup) - (Выборка.Количество+Выборка.Резерв1С); 
	КонецЕсли;      
	
КонецПроцедуры	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьОбОшибке(ТекстОшибки)
	
	Сообщить(ТекстОшибки);
	ЗаписьЖурналаРегистрации("ОбновитьОстаткиТоваровНаSelSup", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);	
	
КонецПроцедуры

Функция ПолучитьДатыДляМетода()
		
	ДатаНач = Формат(ЭтотОбъект.ДатаНачала, "ДФ=yyyy-MM-dd");
	ВремяНач =  Формат(ЭтотОбъект.ДатаНачала,"ДЛФ=T");
	
	ДатаКон = Формат(ЭтотОбъект.ДатаОкончания, "ДФ=yyyy-MM-dd");
	ВремяКон =  Формат(ЭтотОбъект.ДатаОкончания,"ДЛФ=T");    
	
	ДатаВремяНач = ДатаНач +"T"+ ВремяНач+".126Z"; //"2020-02-25T11:40:57.126Z"
	ДатаВремяКон = ДатаКон +"T"+ ВремяКон+".126Z";  
	
	СтруктураДатОтправки = Новый Структура("ДатаНачала, ДатаОкончания", ДатаВремяНач, ДатаВремяКон);
	
	Возврат  СтруктураДатОтправки;
	
КонецФункции 

Функция ПолучитьСтатусОтправления()
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатусОтправления) Тогда
		
		Если СтатусОтправления = "Новый" Тогда
			ИскомыйСтатус = "CREATED";
		ИначеЕсли СтатусОтправления = "Собран" Тогда
			ИскомыйСтатус = "COLLECTED";
		ИначеЕсли СтатусОтправления = "Отменен" Тогда
			ИскомыйСтатус = "REVOKED";
		ИначеЕсли СтатусОтправления = "Отменяется" Тогда
			ИскомыйСтатус = "REVOKING";   
		ИначеЕсли СтатусОтправления = "Выкуплен" Тогда
			ИскомыйСтатус = "FINISHED";			
		ИначеЕсли СтатусОтправления = "Спорный" Тогда
			ИскомыйСтатус = "CONTROVERSIAL";
		ИначеЕсли СтатусОтправления = "Сборка" Тогда
			ИскомыйСтатус = "COLLECTING";  			
		ИначеЕсли СтатусОтправления = "Отправлен" Тогда
			ИскомыйСтатус = "SEND";
		ИначеЕсли СтатусОтправления = "В пути" Тогда
			ИскомыйСтатус = "DELIVERY"; 
		ИначеЕсли СтатусОтправления = "Возврат" Тогда
			ИскомыйСтатус = "REFUND"; 
		ИначеЕсли СтатусОтправления = "Готов к выдаче" Тогда
			ИскомыйСтатус = "READY_FOR_PICKUP"; 
		ИначеЕсли СтатусОтправления = "Забрать возврат" Тогда
			ИскомыйСтатус = "PICK_UP_REFUND"; 
		ИначеЕсли СтатусОтправления = "На сборке" Тогда
			ИскомыйСтатус = "PACKING"; 
		ИначеЕсли СтатусОтправления = "Ожидает оплаты" Тогда
			ИскомыйСтатус = "PAYMENT_REQUIRED";
		ИначеЕсли СтатусОтправления = "Отменен покупателем" Тогда
			ИскомыйСтатус = "CANCELED"; 
		ИначеЕсли СтатусОтправления = "В закупке" Тогда
			ИскомыйСтатус = "WAITING_SUPPLY";
		Иначе
			ИскомыйСтатус = ""; 
			СообщитьОбОшибке("Статус отправления указан неверно!");			
		КонецЕсли;	
		
		Возврат  ИскомыйСтатус;
		
	Иначе
		//СообщитьОбОшибке("Не указан статус отправления!");
		Возврат ""; 
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаименованиеСтатуса(СтатусОтправления)
	
	Если ЗначениеЗаполнено(СтатусОтправления) Тогда  
		
		Если СтатусОтправления = "CREATED" Тогда
			ИскомыйСтатус = "Новый";
		ИначеЕсли СтатусОтправления = "COLLECTED" Тогда
			ИскомыйСтатус = "Собран";
		ИначеЕсли СтатусОтправления = "REVOKED" Тогда
			ИскомыйСтатус = "Отменен";
		ИначеЕсли СтатусОтправления = "REVOKING" Тогда
			ИскомыйСтатус = "Отменяется";   
		ИначеЕсли СтатусОтправления = "FINISHED" Тогда
			ИскомыйСтатус = "Выкуплен";			
		ИначеЕсли СтатусОтправления = "CONTROVERSIAL" Тогда
			ИскомыйСтатус = "Спорный";
		ИначеЕсли СтатусОтправления = "COLLECTING" Тогда
			ИскомыйСтатус = "Сборка";  			
		ИначеЕсли СтатусОтправления = "SEND" Тогда
			ИскомыйСтатус = "Отправлен";
		ИначеЕсли СтатусОтправления = "DELIVERY" Тогда
			ИскомыйСтатус = "В пути"; 
		ИначеЕсли СтатусОтправления = "REFUND" Тогда
			ИскомыйСтатус = "Возврат"; 
		ИначеЕсли СтатусОтправления = "READY_FOR_PICKUP" Тогда
			ИскомыйСтатус = "Готов к выдаче"; 
		ИначеЕсли СтатусОтправления = "PICK_UP_REFUND" Тогда
			ИскомыйСтатус = "Забрать возврат"; 
		ИначеЕсли СтатусОтправления = "PACKING" Тогда
			ИскомыйСтатус = "На сборке"; 
		ИначеЕсли СтатусОтправления = "PAYMENT_REQUIRED" Тогда
			ИскомыйСтатус = "Ожидает оплаты";
		ИначеЕсли СтатусОтправления = "CANCELED" Тогда
			ИскомыйСтатус = "Отменен покупателем"; 
		ИначеЕсли СтатусОтправления = "WAITING_SUPPLY" Тогда
			ИскомыйСтатус = "В закупке"; 			
		Иначе
			ИскомыйСтатус = ""; 
			СообщитьОбОшибке("Статус отправления указан неверно!");
			
		КонецЕсли;
		
		Возврат  ИскомыйСтатус;
	Иначе
		//СообщитьОбОшибке("Не указан статус отправления!");
		Возврат ""; 
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеВидимости(ВыбЗначение);
	
	ЗначениеEn = "";
	Если ВыбЗначение = "все товары" Тогда
		ЗначениеEn = "ALL";
	ИначеЕсли  ВыбЗначение = "товары, которые видны покупателям" Тогда
		ЗначениеEn = "VISIBLE";
	ИначеЕсли  ВыбЗначение = "товары, которые по какой-то из причин не видны покупателям" Тогда
		ЗначениеEn = "INVISIBLE";
	ИначеЕсли  ВыбЗначение = "товары, у которых не указано наличие" Тогда
		ЗначениеEn = "EMPTY_STOCK"; 		
	ИначеЕсли  ВыбЗначение = "товары, которым можно установить наличие" Тогда
		ЗначениеEn = "READY_TO_SUPPLY";
	ИначеЕсли  ВыбЗначение = "товары, создание которых завершилось ошибкой" Тогда
		ЗначениеEn = "STATE_FAILED";
	КонецЕсли;
	Возврат ЗначениеEn;
КонецФункции

Функция ПолучитьДатуОтвета(ВыбДата, ВариантДаты)
	
	Попытка
		НовД = СтрЗаменить(ВыбДата,"-","");  
		НовД = СтрЗаменить(НовД,"[","");
		НовД = СтрЗаменить(НовД,"U","");
		НовД = СтрЗаменить(НовД,"T","");
		НовД = СтрЗаменить(НовД,"Z",""); 
		НовД = СтрЗаменить(НовД,"C",""); 
		НовД = СтрЗаменить(НовД,"]","");
		НовД =СтрЗаменить(НовД,":","");
		НовД =СтрЗаменить(НовД,".","");
		НовД = Лев(НовД, 14);
		ДатаСоздания = Дата(СокрЛП(НовД));
		Возврат ДатаСоздания; 
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокЗаписи, СтатусЗаказа)
	
	Попытка
		если СтатусЗаказа = "отменено" Тогда
			ДокЗаписи.Записать(РежимЗаписиДокумента.Запись);
			ДокЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокЗаписи.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		Сообщить ("Записан документ: "+ ДокЗаписи);
	Исключение
		Сообщить ("Не удалось записать документ: "+ ДокЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

//Поиск документа Заказ покупателя (клиента) по реквизиту НомерПоДаннымКлиента
Функция НайтиЗаказПоНомеру(ВыбНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиента.Ссылка КАК ЗаказПокупателя,
	|	ЗаказКлиента.НомерВходящегоДокумента КАК НомерПоДаннымКлиента,
	|	ЗаказКлиента.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.НомерВходящегоДокумента = &НомерПоДаннымКлиента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеТорговлей" Тогда
		ТекстЗапроса = Запрос.Текст;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказПокупателя", "Документ.ЗаказКлиента");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента.НомерВходящегоДокумента", "ЗаказКлиента.НомерПоДаннымКлиента");  
		Запрос.Текст =  ТекстЗапроса;
		ПустойЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
	Иначе
		ПустойЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка(); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерПоДаннымКлиента", ВыбНомер);
	Выборка  = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Заказпокупателя;
	Иначе
		Возврат ПустойЗаказ; 
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДопРеквизитыУТ(ДокЗаказКлиента, ВыбСтрокаТовара, СтруктураДопСвойств, СтруктураДоп)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокЗаказКлиента.Ссылка);
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Если НЕ  Выборка.Следующий() Тогда // добавляем доп. реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.СтатусЗаказа);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоСтатус;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.СтатусЗаказа;
		
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.ПредельнаяДатаСборки);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоПредельнаяДатаСборки;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.ПредельнаяДатаСборки;    
		
	Иначе	// уже есть доп реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
		//	ТЧДопРеквизиты.Очистить();
		Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
			
			Если ТекР.Свойство.Имя = "статусSelSup" Тогда
				ТекР.Значение = ВыбСтрокаТовара.СтатусЗаказа;
			ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
				ТекР.Значение = ВыбСтрокаТовара.ПредельнаяДатаСборки;
				
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;
	//Заполним значение полученных доп. реквизитов для обработки в заказе
	ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
	Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
		
		Если ТекР.Свойство.Имя = "статусSelSup" Тогда
			СтруктураДоп.статусSelSup =ТекР.Значение ;
		ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
			СтруктураДоп.ПредельнаяДатаСборки =ТекР.Значение ; 				
		КонецЕсли;			
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьДопРеквизиты(ДокЗаказКлиента, ВыбСтрокаТовара, СтруктураДопСвойств, СтруктураДоп)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	
	Если ЭтотОбъект.ИмяМетаданных  = "УправлениеНебольшойФирмой" Тогда
		Запрос.Текст =  СтрЗаменить(Запрос.Текст, "Документ.ЗаказКлиента", "Документ.ЗаказПокупателя"); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокЗаказКлиента.Ссылка);
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Если НЕ  Выборка.Следующий() Тогда // добавляем доп. реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.СтатусЗаказа);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоСтатус;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.СтатусЗаказа;
		
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.ПредельнаяДатаСборки);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоПредельнаяДатаСборки;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.ПредельнаяДатаСборки;    
		
	Иначе	// уже есть доп реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
	
		Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
			
			Если ТекР.Свойство.Имя = "статусSelSup" Тогда
				ТекР.Значение = ВыбСтрокаТовара.СтатусЗаказа;
			ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
				ТекР.Значение = ВыбСтрокаТовара.ПредельнаяДатаСборки;
				
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;
	//Заполним значение полученных доп. реквизитов для обработки в заказе
	ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
	Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
		
		Если ТекР.Свойство.Имя = "статусSelSup" Тогда
			СтруктураДоп.статусSelSup =ТекР.Значение ;
		ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
			СтруктураДоп.ПредельнаяДатаСборки =ТекР.Значение ; 				
		КонецЕсли;			
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьЦенуТовара(СтрокаТовара)
	
	Товар = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Товар) Тогда
		
		Цена1С = 0; Цена = 0;
		ОтборС = Новый Структура("Номенклатура", Товар);
		ПоискЦены1С = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДата(), ОтборС);
		Если ПоискЦены1С.Количество() = 1 Тогда
			Цена1С = ПоискЦены1С.Получить(0).Цена;
		КонецЕсли;
		СтрокаТовара.Цена = Цена;
		СтрокаТовара.Цена1С = Цена1С;  
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти     

#Область СопоставлениеТоваров  
Функция НайтиПродуктыSelSup(TextQuery, Services) Экспорт 
		
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("TextQuery",	  TextQuery); 
	ПараметрыПодключения.Вставить("Services",	  Services); 	
	
	// Находим список товаров, имеющихся в ЛК
	Страница = 0;	
	НоменклатураSelSup = Новый Массив();
	
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОТоварах(ПараметрыПодключения, Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		Попытка
			МассивТоваров = РезультатЗапроса["rows"];
			Для каждого ЭлементТовара Из МассивТоваров Цикл 
				НоменклатураSelSup.Добавить(ЭлементТовара); 						 				
			КонецЦикла;
			Если МассивТоваров.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки()); 
			Возврат Неопределено;
		КонецПопытки; 
		
	КонецЦикла;
		
	ТаблицаНоменклатурыSelSup = ЗаполнитьТаблицуНоменклатурыSelSup(НоменклатураSelSup);
	
	Если ТаблицаНоменклатурыSelSup.Количество() > 0 Тогда
		Возврат ТаблицаНоменклатурыSelSup;
	Иначе
		ТекстСообщения = "Товаров по запросу не обнаружено.";
		Сообщить(ТекстСообщения);
	КонецЕсли;
		
	Возврат Неопределено;	

КонецФункции    

Функция ОбработатьТаблицуНоменклатурыSelSup(ТаблицаНоменклатурыSelSup) Экспорт   
	
	//поиск по штрих-коду
	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.id КАК ЧИСЛО(10, 0)) КАК id,
	|	ТаблицаНоменклатурыSelSup.oneCId КАК oneCId,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.article КАК СТРОКА(20)) КАК article,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.name КАК СТРОКА(300)) КАК name,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.barcode КАК СТРОКА(200)) КАК barcode
	|ПОМЕСТИТЬ ТаблицаНоменклатурыSelSup
	|ИЗ
	|	&ТаблицаНоменклатурыSelSup КАК ТаблицаНоменклатурыSelSup
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ТаблицаНоменклатурыSelSup.id КАК id,
	|	ТаблицаНоменклатурыSelSup.article КАК article,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) КАК oneCId
	|ПОМЕСТИТЬ ИтоваяТаблица
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыSelSup КАК ТаблицаНоменклатурыSelSup
	|		ПО (ТаблицаНоменклатурыSelSup.oneCId = &ПустойУникальныйИдентификатор
	|					И Номенклатура.Артикул = ТаблицаНоменклатурыSelSup.article
	|				ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) = ТаблицаНоменклатурыSelSup.oneCId)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура.Ссылка,
	|	ТаблицаНоменклатурыSelSup.id,
	|	ТаблицаНоменклатурыSelSup.article,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ШтрихкодыНоменклатуры.Номенклатура.Ссылка)
	|ИЗ
	|	ТаблицаНоменклатурыSelSup КАК ТаблицаНоменклатурыSelSup
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ТаблицаНоменклатурыSelSup.oneCId = &ПустойУникальныйИдентификатор)
	|			И ТаблицаНоменклатурыSelSup.barcode = ШтрихкодыНоменклатуры.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИтоваяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоваяТаблица.id КАК id,
	|	ИтоваяТаблица.article КАК article,
	|	ИтоваяТаблица.oneCId КАК oneCId
	|ИЗ
	|	ИтоваяТаблица КАК ИтоваяТаблица";  
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыSelSup", ТаблицаНоменклатурыSelSup); 
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ЗаполнитьТаблицуНоменклатурыSelSup(НоменклатураSelSup) Экспорт
	
	
	//sku - Идентификатор товара в системе SelSup — SKU  
	//barcode - Штрихкод
	
	ТаблицаНоменклатурыSelSup = Новый ТаблицаЗначений();  
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("name", Новый ОписаниеТипов("Строка")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("id", Новый ОписаниеТипов("Число"));  
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("article", Новый ОписаниеТипов("Строка"));  
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("barcode", Новый ОписаниеТипов("Строка")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("organizationId", Новый ОписаниеТипов("Число"));   
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("oneCId", Новый ОписаниеТипов("УникальныйИдентификатор")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("mainImageUrl", Новый ОписаниеТипов("Строка"));
	
	Если НоменклатураSelSup.Количество() = 0 Тогда
		Возврат ТаблицаНоменклатурыSelSup;
	КонецЕсли;		
	
	i = 0;
	
	Пока i < НоменклатураSelSup.Количество() Цикл  
		
		НоваяСтрока = ТаблицаНоменклатурыSelSup.Добавить(); 		
		НоваяСтрока.name           = НоменклатураSelSup[i]["name"];  
		НоваяСтрока.id             = НоменклатураSelSup[i]["id"]; 
		НоваяСтрока.organizationId = НоменклатураSelSup[i].organizationId;  
		Если НоменклатураSelSup[i].view.model.Свойство("article") Тогда 
			НоваяСтрока.article = НоменклатураSelSup[i].view.model.article; 
		КонецЕсли; 
		Если НоменклатураSelSup[i].view.Свойство("mainImageUrl") Тогда 
			НоваяСтрока.mainImageUrl = НоменклатураSelSup[i].view.mainImageUrl;   
		КонецЕсли;	
		
		Если НоменклатураSelSup[i].Свойство("oneCId") Тогда
			oneCId = НоменклатураSelSup[i].oneCId; 
			Если ЗначениеЗаполнено(oneCId) Тогда 
				Если СтрНайти(oneCId, "R") = 0 
					И Не СтрНайти(oneCId, "-") = 0 Тогда  //TODO
					НоваяСтрока.oneCId = Новый УникальныйИдентификатор(oneCId); 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//плоская таблица штрих-кодов
		barcodes = НоменклатураSelSup[i].barcodes; 
		j = 0;
		Для каждого ЭлементМассива Из barcodes Цикл  
			Если j = 0 Тогда
				НоваяСтрока.barcode = ЭлементМассива.barcode;   
			Иначе        
				ДублирующаяСтрока = ТаблицаНоменклатурыSelSup.Добавить(); 
				ЗаполнитьЗначенияСвойств(ДублирующаяСтрока, НоваяСтрока, , "barcode"); 
				ДублирующаяСтрока.barcode = ЭлементМассива.Получить("barcode");
			КонецЕсли;	
			j = j + 1;
		КонецЦикла;
		
		i = i + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатурыSelSup;
	
КонецФункции

Процедура ОбновитьМодельПродуктаSelSup(Id, OrganizationId, OneCId) Экспорт 
	
	Метод = "/api/product/updateProduct?merge=true&onlyProduct=true";  
		
	json = Новый Структура;   
	json.Вставить("id",             Id);  
	json.Вставить("oneCId",         Строка(OneCId));
	json.Вставить("organizationId", OrganizationId); 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 
		Если РезультатЗапроса = Неопределено Тогда  
			Сообщить("Операция сопоставления товаров не выполнена.", СтатусСообщения.ОченьВажное);
		Иначе
			Сообщить("Операция сопоставления товаров выполнена.", СтатусСообщения.Информация);  
		КонецЕсли;
	Исключение
		СообщитьОбОшибке("При обновлении модели продукта возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры 

Функция СвязатьТовары_SelSup_С_1С(Name, Id, Article, oneCId) Экспорт 
	 
	Метод = "/api/product/linkProduct?service=ONE_C"; 
	
	params = Новый Массив;
	
	//Для каждого ТекСтр Из МассивСвязкиТоваров Цикл
		
		СтруктураТовара = Новый Структура;   
		СтруктураТовара.Вставить("productId",       Id);  
		СтруктураТовара.Вставить("externalId",      Строка(OneCId));
		СтруктураТовара.Вставить("externalArticle", СОКРЛП(Article));		
		
		params.Добавить(СтруктураТовара);
		
	//КонецЦикла;
	
	json = Новый Структура;   
	json.Вставить("params", params);  
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();  
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Лев(ТекстЗапроса, 13), "");
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-3);
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 
		Если РезультатЗапроса = Неопределено Тогда  
			Сообщить("Операция " + ?(oneCId = NULL, "удаления", "") + " сопоставления товара " + Name + " не выполнена.", СтатусСообщения.ОченьВажное); 
			Возврат Неопределено;
		Иначе
			Сообщить("Операция " + ?(oneCId = NULL, "удаления", "") + " сопоставления товара " + Name + " выполнена.", СтатусСообщения.Информация); 
			Возврат OneCId;
		КонецЕсли;
	Исключение
		СообщитьОбОшибке("При " + ?(oneCId = NULL, "удалении сопоставления", "сопоставлении") + " товара " + Name + " возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции 
#КонецОбласти         

UrlSelSup = "api.selsup.ru"; 
//UrlSelSup = "test.selsup-team.ru"; 


