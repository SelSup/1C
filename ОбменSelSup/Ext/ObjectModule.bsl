Перем UrlSelSup; //api.selsup.ru 

#Область ОбработчикиСобытийФормы
Функция СведенияОВнешнейОбработке(ВерсияБСП = "") Экспорт
	
	Результат = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	
	Результат.БезопасныйРежим = Ложь;
	Результат.Вид 	 		  = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	Результат.Версия 		  = "1.01";
	
	НоваяКоманда = Результат.Команды.Добавить();
	НоваяКоманда.Представление 		  = "Обмен SelSup";
	НоваяКоманда.Идентификатор 		  = "ОбменSelSup";
	НоваяКоманда.Использование 		  = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт	
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс 

Процедура ОбработатьОрганизации() Экспорт
	
	Организации.Очистить();
	
	// Находим список организаций, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОбОрганизациях(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			МассивОрганизаций = РезультатЗапроса["rows"];
			Для каждого СтрокаОрганизации Из МассивОрганизаций Цикл 
				НоваяСтрока = Организации.Добавить();
				НоваяСтрока.ID_SelSup               = СтрокаОрганизации.id; 
				НоваяСтрока.НаименованиеОрганизации = СтрокаОрганизации.organization.shortName; 						 				
			КонецЦикла;
			Если МассивОрганизаций.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
		
	//// Заполняем организации
	//Для каждого СтрокаОрганизации Из Организации Цикл		
	//	ЗаполнитьОрганизацию(СтрокаОрганизации);		
	//КонецЦикла;
	
КонецПроцедуры  

Процедура ОбработатьСкладыONE_C(СкладыONE_C) Экспорт
	
	
	// Находим список складов ONE_C, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОСкладахONE_C(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Попытка
			МассивСкладов = РезультатЗапроса;
			Для каждого СтрокаСклада Из МассивСкладов Цикл 
				НоваяСтрока = СкладыONE_C.Добавить();
				НоваяСтрока.ID_SelSup          = СтрокаСклада.id;  
				GUID = СтрокаСклада["warehouseServices"][0]["externalId"];
				Если Не СтрНайти(GUID, "-") = 0 Тогда
					НоваяСтрока.ID_1C = Новый УникальныйИдентификатор(СтрокаСклада["warehouseServices"][0]["externalId"]);
				КонецЕсли;	
				НоваяСтрока.НаименованиеСклада = СтрокаСклада.name; 						 				
			КонецЦикла;
			Если МассивСкладов.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки()); 
			Возврат;
		КонецПопытки; 
		
	КонецЦикла; 
		
КонецПроцедуры

Процедура ОбработатьСклады() Экспорт
		
	СкладыONE_C = Склады.ВыгрузитьКолонки(); 
	ОбработатьСкладыONE_C(СкладыONE_C);
	
	Склады.Очистить();
	
	// Находим список складов, имеющихся в ЛК
	Страница = 0;		
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ИнформацияОСкладах(Страница);  
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			МассивСкладов = РезультатЗапроса;
			Для каждого СтрокаСклада Из МассивСкладов Цикл   
				
			    //не связываем удаленные склады	
				Если СтрокаСклада.deleted Тогда
					Продолжить;
			    КонецЕсли;		
				
				НоваяСтрока = Склады.Добавить();
				НоваяСтрока.ID_SelSup          = СтрокаСклада.id; 
				НоваяСтрока.НаименованиеСклада = СтрокаСклада.name; 
				
				// Заполняем склады
				Отбор = Новый Структура();
				Отбор.Вставить("ID_SelSup", СтрокаСклада.id);
				Строки = СкладыONE_C.НайтиСтроки(Отбор);
				Если Строки.Количество() > 0 Тогда
					НоваяСтрока.Склад = Справочники.Склады.ПолучитьСсылку(Строки[0].ID_1C);
				КонецЕсли;
								
			КонецЦикла;
			Если МассивСкладов.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
			
КонецПроцедуры

// Вариант 1 : остатки товаров 2 - отчет по товарам, 3 - цены (выполняется автоматом с вариантом 1)
Процедура ОбработатьТовары(Вариант) Экспорт
	
	Товары.Очистить();
	
	// Находим список товаров, имеющихся в ЛК
	Страница = 0;
	Если Вариант = 1 ИЛи Вариант = 2 Тогда
		
		Пока Истина Цикл
			
			Страница = Страница + 1;
			
			Если Страница > 2 Тогда Прервать КонецЕсли;
			
			РезультатЗапроса = ИнформацияОСтокахТоваров(Вариант, Страница);  
			
			Если РезультатЗапроса = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Попытка
				МассивТоваров = РезультатЗапроса["rows"];
				Для каждого СтрокаТовара Из МассивТоваров Цикл 
					Если   Вариант = 1 Тогда
						НоваяСтрока = Товары.Добавить();
						НоваяСтрока.ID 			= СтрокаТовара["view"].model.article;
						НоваяСтрока.ОстатокSelSup = СтрокаТовара["instockQuantity"];
						
						НоваяСтрока.ID_SelSup  	                    = СтрокаТовара["id"];
						//НоваяСтрока.ОжидаетсяКПоставкеSelSup 			= СтрокаТовара["stock"]["coming"];
						//НоваяСтрока.ВРезервеSelSup 	             	= СтрокаТовара["stock"]["reserved"];
						
					ИначеЕсли Вариант = 2 Тогда
						НоваяСтрока = Товары.Добавить();
						НоваяСтрока.ID 			= СтрокаТовара["view"].model.article;
						НоваяСтрока.ID_SelSup   = СтрокаТовара.id; 
						НоваяСтрока.ТЧ_SKU      = СтрокаТовара.skuId; 					
						НоваяСтрока.Цена        = СтрокаТовара["price"]; 
						
						//плоская таблица штрих-кодов
						barcodes = СтрокаТовара["barcodes"]; 
						j = 0;
						Для каждого ЭлементМассива Из barcodes Цикл  
							Если j = 0 Тогда
								НоваяСтрока.ШтрихКод = ЭлементМассива.barcode;   
							Иначе        
								ДублирующаяСтрока = Товары.Добавить(); 
								ЗаполнитьЗначенияСвойств(ДублирующаяСтрока, НоваяСтрока, , "barcode"); 
								ДублирующаяСтрока.ШтрихКод = ЭлементМассива.barcode;
							КонецЕсли;	
							j = j + 1;
						КонецЦикла;		
										
					КонецЕсли;   
					
				КонецЦикла;
				Если МассивТоваров.Количество() < 200 Тогда
					Прервать;
				КонецЕсли;
			Исключение
				СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли; 
		
	// Заполняем остатки
	Для каждого СтрокаТовара Из Товары Цикл
		
		ЗаполнитьНоменклатуру(СтрокаТовара);
		ЗаполнитьОстатки(СтрокаТовара);
		ЗаполнитьЦенуТовара(СтрокаТовара);
		
		
		Если НЕ СтрокаТовара.ЕстьОшибка И СтрокаТовара.ОстатокSelSup <> СтрокаТовара.Остаток1С Тогда
			СтрокаТовара.ОбновитьОстаток = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьОтправления(ВидПродажи = Неопределено) Экспорт
	
	Заказы.Очистить();

	// Получаем список товаров, опубликованных в ЛК
	Страница = 0;
	
	Пока Истина Цикл
		
		Страница = Страница + 1;
		
		РезультатЗапроса = ОтправленияСоСкладаПродавца(Страница);
		
		Если РезультатЗапроса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка                               
			МассивТоваров = РезультатЗапроса["rows"];
			Для каждого СтрокаТовара Из МассивТоваров Цикл  
								
				МассивПродуктовЗаказа = СтрокаТовара["products"];
				Для Каждого ТекТовар ИЗ МассивПродуктовЗаказа Цикл 
					 
					Попытка 
						НомерЗаказа = СтрокаТовара["invoiceNumber"]; 
					Исключение 
					КонецПопытки;
				
					Если ЗначениеЗаполнено(ЭтотОбъект.ВыбНомерЗаказа)
						И ЭтотОбъект.ВыбНомерЗаказа <> НомерЗаказа Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Заказы.Добавить();    
					
					Если Не ЗначениеЗаполнено(НомерЗаказа) Тогда
						Сообщить ("Не найден номер заказа в строке " + НоваяСтрока.НомерСтроки);
					КонецЕсли;
					
					ДатаСоздания = ПолучитьДатуОтвета(СтрокаТовара.createdDate, "ДатаСоздания");
					НоваяСтрока.ДатаСоздания = ДатаСоздания;      
					//ПредельнаяДатаСборки = ПолучитьДатуОтвета(СтрокаТовара.deliveryDate, "ПредельнаяДатаСборки"); 
					ПредельнаяДатаСборки = ПолучитьДатуОтвета(СтрокаТовара.createdDate, "ПредельнаяДатаСборки");
					НоваяСтрока.ПредельнаяДатаСборки = ПредельнаяДатаСборки;
					
					НоваяСтрока.IDЗаказа 			    = СтрокаТовара["id"]; 
					НоваяСтрока.НомерЗаказа 			= НомерЗаказа;
					НоваяСтрока.organizationid    	    = СтрокаТовара["organizationid"];   
					НоваяСтрока.НомерОтправления 	    = НомерЗаказа;                      //НомерЗаказа???   
					НоваяСтрока.Маркетплейс 			= СтрокаТовара["service"];       
					ПоискЗаказ = НайтиЗаказПоНомеру(НоваяСтрока.НомерОтправления);
					Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой" Тогда
						НоваяСтрока.ЗаказПокупателя = ПоискЗаказ;						
					Иначе
						НоваяСтрока.ЗаказКлиента = ПоискЗаказ;		
					КонецЕсли;
					СтатусЗаказа = СтрокаТовара["status"]; 
					НоваяСтрока.СтатусЗаказа = ПолучитьНаименованиеСтатуса(СтатусЗаказа);									
					НоваяСтрока.НаименованиеТовара = ТекТовар.product.name;
					НоваяСтрока.Артикул = ТекТовар.product.view.model.article; 
					НоваяСтрока.Цена = ТекТовар.price;
					НоваяСтрока.Заказано = ТекТовар.quantity;
					НоваяСтрока.ID_sku = ТекТовар.product.skuId; 
					
					barcodes = ТекТовар.product.barcodes;
					Если barcodes.Количество() > 0 Тогда 
						НоваяСтрока.ШтрихКод = ТекТовар.product.barcodes[0].barcode;  
					КонецЕсли;					
					
					НоваяСтрока.СуммаЗаказа = НоваяСтрока.Цена*НоваяСтрока.Заказано;
					
					Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой" Тогда
						ЗаполнитьНоменклатуру(НоваяСтрока, Истина);
					Иначе          
						Если ЗначениеЗаполнено(НоваяСтрока.ШтрихКод) Тогда
							ПоискНоменклатура = НайтиНоменклатуруERPПоШтрихКоду(НоваяСтрока.ШтрихКод, НоваяСтрока, Истина);
							Если ЗначениеЗаполнено(ПоискНоменклатура) Тогда    
								НоваяСтрока.Номенклатура = ПоискНоменклатура.Ссылка; 
							КонецЕсли;
						КонецЕсли;	
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
							И ЗначениеЗаполнено(НоваяСтрока.Артикул) Тогда
							ПоискНоменклатура = НайтиНоменклатуруERPПоID(НоваяСтрока.Артикул, НоваяСтрока, Истина);
							Если ЗначениеЗаполнено(ПоискНоменклатура) Тогда    
								НоваяСтрока.Номенклатура = ПоискНоменклатура.Ссылка; 
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;				
					
				КонецЦикла;
				
			КонецЦикла;
			Если МассивТоваров.Количество() < 200 Тогда
				Прервать;
			КонецЕсли;
		Исключение
			СообщитьОбОшибке("Ошибка при чтении ответа от сервера: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЦикла; 
	
	Если Заказы.Количество() = 0 Тогда
		Сообщить("Заказов на указанную дату не обнаружено."); 
	КонецЕсли;	
	
КонецПроцедуры

//  перебор все товаров из ТЗ Товары и запись в МассивТоваров по 100 для обновления
//  в процедуре УстановитьОстатки  (МассивТоваров)
Процедура УстановитьОстаткиТоваров() Экспорт
	
	МассивТоваров = Новый Массив;
	
	Для каждого ТекСтр Из Товары Цикл
		
		Если НЕ ТекСтр.ОбновитьОстаток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекСтр.ЕстьОшибка
			И Не ЭтотОбъект.ТестовыйРежим Тогда
			Продолжить;
		КонецЕсли;
				
		МассивТоваров.Добавить(ТекСтр);
		Если МассивТоваров.Количество() = 100 Тогда
			УстановитьОстатки(МассивТоваров);
			МассивТоваров.Очистить();
		КонецЕсли;
		
	КонецЦикла;	
	
	Если МассивТоваров.Количество() > 0 Тогда
		УстановитьОстатки(МассивТоваров);
	КонецЕсли;
	
КонецПроцедуры 

//  перебор все склады из ТЗ Склады и запись в МассивСкладов по 100 для обновления
//  в процедуре УстановитьСвязьСоСкладом  (МассивСкладов)
Процедура СвязатьСклады() Экспорт
		
	Для каждого ТекСтр Из Склады Цикл
		
		Если НЕ ТекСтр.СвязатьСклады Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтр.Склад) Тогда
			Сообщить("В строке " + ТекСтр.НомерСтроки + " не заполнен склад.");
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ТекСтр.ID_SelSup) Тогда   
			Сообщить("В строке " + ТекСтр.НомерСтроки + " не определен склад SelSup.");
			Продолжить;
		КонецЕсли;
		
		УстановитьСвязьСоСкладом(ТекСтр);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьРеализации() Экспорт
	
	Для Каждого ТекСтрока Из ЭтотОбъект.Заказы Цикл
		Если  ТекСтрока.Обработать Тогда
			ДокР = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ДокР.Автор = ПараметрыСеанса.ТекущийПользователь;
			ДокР.Валюта = Справочники.Валюты.НайтиПоКоду();
			ДокР.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду();
			ДокР.Грузоотправитель = "";
			ДокР.Дата = "";
			ДокР.Номер = "";
			ДокР.Комментарий = "Создано по продажам с сайта SelSup";
			ДокР.Контрагент = "";
			ДокР.Соглашение = "";
			ДокР.Менеджер = "";
			ДокР.Склад = "";
			ДокР.Соглашение = "";
			ТоварыР = ДокР.Товары.Добавить();
			ТоварыР.Номенклатура = ТекСтрока.Номенклатура;
			ТоварыР.ВидЦены = "";
			ТоварыР.Цена = ТекСтрока.Цена;
			ТоварыР.СтавкаНДС = "";
			ТоварыР.СуммаНДС = "";
			ТоварыР.Количество = ТекСтрока.Заказано;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗаказыПокупателей() Экспорт   
	
		
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой" Тогда
		
		СформироватьЗаказыПокупателейУНФ();
	Иначе
		
		ТЗЗаказов = ЭтотОбъект.Заказы.Выгрузить();
		ТЗЗаказов.Сортировать("ДатаСоздания, НомерЗаказа");
		
		
		Если ЭтотОбъект.ИспользоватьРасширеннуюНастройкуЗаказов Тогда 
			
	        ЕстьОшибка = Ложь;
			КопияТЗЗаказов = ЭтотОбъект.Заказы.Выгрузить();
			КопияТЗЗаказов.Свернуть("organizationid");   
			Массив_ID_SelSup = КопияТЗЗаказов.ВыгрузитьКолонку("organizationid");
			
			Для каждого ЭлементМассива Из Массив_ID_SelSup Цикл  
				
				Отбор = Новый Структура();
				Отбор.Вставить("ID_SelSup", ЭлементМассива);
				Строки = ЭтотОбъект.Организации.НайтиСтроки(Отбор);
				
				Если Строки.Количество() > 0 Тогда 
					
					Отбор = Новый Структура();
					Отбор.Вставить("Организация", Строки[0].Организация);
					
					НайденныеСтроки = ЭтотОбъект.РасширеннаяНастройкаЗаказов.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Если НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Контрагент)
							ИЛИ НЕ ЗначениеЗаполнено(НайденныеСтроки[0].Соглашение) Тогда
							ЕстьОшибка = Истина;
						КонецЕсли;    
					Иначе
					    ЕстьОшибка = Истина;	
					КонецЕсли;
					
				Иначе
					ЕстьОшибка = Истина;
				КонецЕсли;
				
			КонецЦикла; 
			
			Если ЕстьОшибка Тогда
				Сообщить("Заполните значения колонок 'Организация', 'Контрагент', 'Соглашение' табличной части по всем организациям на закладке настроек заказа!");
				Возврат;
			КонецЕсли;	
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) 
				ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбКонтрагент) 
				ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСоглашение) Тогда 
				
				Сообщить("Заполните реквизиты документов на закладке настроек заказа!");
				Возврат; 
				
			КонецЕсли;
			
		КонецЕсли;
			
		СвойствоСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","статусSelSup");
		СвойствоПредельнаяДатаСборки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПредельнаяДатаСборки");
		СтруктураДопСвойств = Новый Структура("СвойствоСтатус, СвойствоПредельнаяДатаСборки", СвойствоСтатус, СвойствоПредельнаяДатаСборки);
		
		Д = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
		
		НомерЗаказаСтар = Неопределено;
		ДокЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
		Для Каждого ТекТовар Из ЭтотОбъект.Заказы Цикл
			
			Если ТекТовар.Обработать = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ЭтотОбъект.ВыбНомерЗаказа)
			//	И ЭтотОбъект.ВыбНомерЗаказа <> ТекТовар.НомерЗаказа Тогда
			//	Продолжить;
			//КонецЕсли;   			 
			
			Если ТекТовар.НомерЗаказа <> НомерЗаказаСтар Тогда
				
				Если ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда // заказ уже есть в базе
					ДокЗаказКлиента =  ТекТовар.ЗаказКлиента.ПолучитьОбъект();
				Иначе                                               // новый заказ 
					
					ДокЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент();
					
					ДокЗаказКлиента.Дата = ТекТовар.ДатаСоздания; 
					Если ЭтотОбъект.ИспользоватьРасширеннуюНастройкуЗаказов Тогда  					
						Отбор = Новый Структура();
						Отбор.Вставить("ID_SelSup", ТекТовар.organizationid);
						Строки = ЭтотОбъект.Организации.НайтиСтроки(Отбор);
						Если Строки.Количество() > 0 Тогда
							Отбор = Новый Структура();
							Отбор.Вставить("Организация", Строки[0].Организация);
							НайденныеСтроки = ЭтотОбъект.РасширеннаяНастройкаЗаказов.НайтиСтроки(Отбор);
							Если НайденныеСтроки.Количество() > 0 Тогда
								ДокЗаказКлиента.Организация = НайденныеСтроки[0].Организация;  
								ДокЗаказКлиента.Контрагент = НайденныеСтроки[0].Контрагент;  
								ДокЗаказКлиента.Соглашение = НайденныеСтроки[0].Соглашение;	
							КонецЕсли;    
						КонецЕсли;	
					Иначе
						ДокЗаказКлиента.Организация = ЭтотОбъект.Организация;  
						ДокЗаказКлиента.Контрагент = ЭтотОбъект.ВыбКонтрагент;  
						ДокЗаказКлиента.Соглашение = ЭтотОбъект.ВыбСоглашение;
					КонецЕсли;   
					
					ДокЗаказКлиента.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
					ДокЗаказКлиента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
					КонтрМаркетплейс = ЭтотОбъект.ВыбКонтрагент;
					ДокЗаказКлиента.СпособДоставки = ЭтотОбъект.СпособДоставки;
					Если ЗначениеЗаполнено(КонтрМаркетплейс) Тогда
						ДокЗаказКлиента.Партнер = КонтрМаркетплейс.Партнер;
					КонецЕсли;
					ДокЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
					ДокЗаказКлиента.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
					
					ДокЗаказКлиента.Автор = "";
					ДокЗаказКлиента.Склад = ЭтотОбъект.ВыбСкладРеал;
					ДокЗаказКлиента.ЦенаВключаетНДС = ЭтотОбъект.ЦенаВключаетНДС;
					ДокЗаказКлиента.НалогообложениеНДС = ЭтотОбъект.НалогообложениеНДС;
					ДокЗаказКлиента.Менеджер = ЭтотОбъект.ВыбМенеджер;
					ДокЗаказКлиента.НомерПоДаннымКлиента = ТекТовар.НомерОтправления;   
					
					Если Не ЗначениеЗаполнено(ДокЗаказКлиента.Комментарий) Тогда
						ДокЗаказКлиента.Комментарий = "Создан автоматически по заказам на SelSup";
					КонецЕсли;  
					
				КонецЕсли;
				
			Иначе 
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда
				
				НоваяСтрока = ДокЗаказКлиента.Товары.Добавить();
				НоваяСтрока.Номенклатура =  ТекТовар.Номенклатура;
				НоваяСтрока.Упаковка = ЭтотОбъект.ВыбУпаковка;
				НоваяСтрока.Количество = ТекТовар.Заказано;
				НоваяСтрока.КоличествоУпаковок = ТекТовар.Заказано;
				НоваяСтрока.ДатаОтгрузки = ТекТовар.ДатаСоздания;
				НоваяСтрока.Склад = ЭтотОбъект.ВыбСкладРеал;
				
				//НоваяСтрока.ВидЦены = Справочники.ВидыЦен.НайтиПоКоду();
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
				НоваяСтрока.Цена = ТекТовар.Цена;
				НоваяСтрока.Сумма = ТекТовар.Заказано *  ТекТовар.Цена;
				НДС = 0;
				
				Если ЗначениеЗаполнено(ТекТовар.Номенклатура) Тогда 
					ПоискСтавкаНДС = ТекТовар.Номенклатура.СтавкаНДС;
					СтавкаНДС = ?(ПоискСтавкаНДС = Справочники.СтавкиНДС.БезНДС, 0, Число(Лев(ПоискСтавкаНДС, 2)));
					Если ЭтотОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда 
						
						НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
						НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
						
					ИначеЕсли ДокЗаказКлиента.ЦенаВключаетНДС   					
						И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
						
						НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
						НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
						НоваяСтрока.СуммаНДС = НДС;      					
						
						// ндс сверху 
					ИначеЕсли Не ДокЗаказКлиента.ЦенаВключаетНДС
						И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда     					
						
						НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
						НДС = НоваяСтрока.Сумма  *( 1+СтавкаНДС/100) -НоваяСтрока.Сумма;
						НоваяСтрока.СуммаНДС = НДС; 
						НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + НДС;
						
					Иначе  // считаем, что цена с НДС
						НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
						
						ДокЗаказКлиента.ЦенаВключаетНДС = Истина;
						НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
						НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
						НоваяСтрока.СуммаНДС = НДС;
						
					КонецЕсли;
				Иначе
					НоваяСтрока.СуммаНДС = НДС;
					НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
				КонецЕсли;
				//	НоваяСтрока.Всего = НоваяСтрока.Сумма;
				
			Иначе   
				//заказ повторно не заполняем	
			КонецЕсли;
			
			// Заполняем доп реквизит статусSelSup
			СтруктураДоп = Новый Структура("статусSelSup, ПредельнаяДатаСборки");
	//		ЗаполнитьДопРеквизиты(ДокЗаказКлиента, ТекТовар, СтруктураДопСвойств, СтруктураДоп );  
			
			Если ДокЗаказКлиента <> Документы.ЗаказКлиента.ПустаяСсылка() Тогда
				ЗаписатьДокумент(ДокЗаказКлиента, СтруктураДоп.статусSelSup);
				ТекТовар.ЗаказКлиента = ДокЗаказКлиента.Ссылка; 
			КонецЕсли;		
			
			НомерЗаказаСтар = ТекТовар.НомерЗаказа;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьЗаказыПокупателейУНФ() Экспорт
	
	ТЗЗаказов = ЭтотОбъект.Заказы.Выгрузить();
	ТЗЗаказов.Сортировать("ДатаСоздания, НомерЗаказа");
	СвойствоСтатус = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","статусSelSup");
	СвойствоПредельнаяДатаСборки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ПредельнаяДатаСборки");
	СтруктураДопСвойств = Новый Структура("СвойствоСтатус, СвойствоПредельнаяДатаСборки", СвойствоСтатус, СвойствоПредельнаяДатаСборки);
	
	Д = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	
	НомерЗаказаСтар = Неопределено;
	ДокЗаказКлиента = Документы.ЗаказПокупателя.ПустаяСсылка();
	Для Каждого ТекТовар Из ЭтотОбъект.Заказы Цикл
		
		Если ТекТовар.Обработать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ВыбНомерЗаказа)
			И ЭтотОбъект.ВыбНомерЗаказа <> ТекТовар.НомерЗаказа Тогда
			Продолжить;
		КонецЕсли;   			 
		
		Если ТекТовар.НомерЗаказа <> НомерЗаказаСтар Тогда
			
			Если ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда // заказ уже есть в базе
				ДокЗаказКлиента =  ТекТовар.ЗаказКлиента.ПолучитьОбъект();
			Иначе                                               // новый заказ
				ДокЗаказКлиента = Документы.ЗаказПокупателя.СоздатьДокумент();
				
				ДокЗаказКлиента.Дата = ТекТовар.ДатаСоздания;
				ДокЗаказКлиента.Организация = ЭтотОбъект.Организация;
				ДокЗаказКлиента.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
				
				ДокЗаказКлиента.Контрагент = ЭтотОбъект.ВыбКонтрагент;
				ДокЗаказКлиента.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				
				ДокЗаказКлиента.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
				ДокЗаказКлиента.Курс = 1;
				ДокЗаказКлиента.Кратность = 1;
				ДокЗаказКлиента.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
				ДокЗаказКлиента.ХозяйственнаяОперация = Справочники.ХозяйственныеОперации.ЗаказНаПродажу;
				КонтрМаркетплейс = ЭтотОбъект.ВыбКонтрагент; 
				ДокЗаказКлиента.Контрагент = КонтрМаркетплейс;
				ДокЗаказКлиента.СпособДоставки = ЭтотОбъект.СпособДоставки;
				ДокЗаказКлиента.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе");
				
				ДокЗаказКлиента.Автор = "";
				ДокЗаказКлиента.НДСВключатьВСтоимость = ЭтотОбъект.ЦенаВключаетНДС;
				ДокЗаказКлиента.НалогообложениеНДС = ЭтотОбъект.НалогообложениеНДС;
				ДокЗаказКлиента.Договор = ЭтотОбъект.ВыбСоглашение;
				ДокЗаказКлиента.НомерВходящегоДокумента = ТекТовар.НомерОтправления;
				Если Не ЗначениеЗаполнено(ДокЗаказКлиента.Комментарий) Тогда
					ДокЗаказКлиента.Комментарий = "Создан автоматически по заказам на SelSup";
				КонецЕсли;  				
			КонецЕсли;
			
		Иначе 
		КонецЕсли;
		
		// ТЧ  Запасы не перезаполняем
		Если НЕ ЗначениеЗаполнено(ТекТовар.ЗаказКлиента) Тогда
			
			НоваяСтрока = ДокЗаказКлиента.Запасы.Добавить();
			НоваяСтрока.Номенклатура =  ТекТовар.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ЭтотОбъект.ВыбЕдиницаИзмеренияУНФ;
			НоваяСтрока.Количество = ТекТовар.Заказано;
			НоваяСтрока.ДатаОтгрузки = ТекТовар.ДатаСоздания;
			НоваяСтрока.Цена = ТекТовар.Цена;
			НДС = 0;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма;
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
			НоваяСтрока.СуммаНДС =0;
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
			//Если ЭтотОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда 
			//	
			//	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			//	НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			//	
			//ИначеЕсли ДокЗаказКлиента.НДСВключатьВСтоимость   					
			//	И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			//	
			//	НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
			//	НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
			//	НоваяСтрока.СуммаНДС = НДС;      					
			//	
			//	// ндс сверху 
			//ИначеЕсли Не ДокЗаказКлиента.НДСВключатьВСтоимость
			//	И ДокЗаказКлиента.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда     					
			//	 					
			//	НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
			//	НДС = НоваяСтрока.Сумма  *( 1+СтавкаНДС/100) -НоваяСтрока.Сумма;
			//	НоваяСтрока.СуммаНДС = НДС; 
			//	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + НДС;
			//	
			//Иначе  // считаем, что цена с НДС
			//	НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма;
			//	
			//	ДокЗаказКлиента.НДСВключатьВСтоимость = Истина;
			//	НоваяСтрока.СтавкаНДС = ПоискСтавкаНДС;
			//	НДС = Окр(НоваяСтрока.Сумма / (100+СтавкаНДС) * СтавкаНДС,2) ; 	
			//	НоваяСтрока.СуммаНДС = НДС;
			//	
			//КонецЕсли; 			
		Иначе   
			//заказ повторно не заполняем	
		КонецЕсли;
		
		
		ДокЗаказКлиента.СуммаДокумента = ДокЗаказКлиента.Запасы.Итог("Всего");
		// Заполняем доп реквизит статусSelSup
		СтруктураДоп = Новый Структура("статусSelSup, ПредельнаяДатаСборки");
		//ЗаполнитьДопРеквизиты(ДокЗаказКлиента, ТекТовар, СтруктураДопСвойств, СтруктураДоп );  
		//ДокЗаказКлиента.ДатаОтгрузки = СтруктураДоп.ПредельнаяДатаСборки;
		Если ДокЗаказКлиента <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			ЗаписатьДокумент(ДокЗаказКлиента, СтруктураДоп.статусSelSup);
			ТекТовар.ЗаказПокупателя = ДокЗаказКлиента.Ссылка; 
		КонецЕсли;		
		
		НомерЗаказаСтар = ТекТовар.НомерЗаказа;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область API_SelSup

Функция ВыполнитьТестSelSup() Экспорт
	
	Метод  = "/api/product/findProduct?page=1&limit=5";  // получим информации на 1 странице о 5 товарах
		
	Попытка
		РезультатЗапроса = ЭтотОбъект.ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка товаров возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОбОрганизациях(Страница)
	
	
	Метод  = "/api/client/findClientOrganization?limit=200&ascending=true&count=true&page=" + Страница;		
		
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка организаций возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОСкладах(Страница)
	
	
	Метод  = "/api/warehouse/getWarehouses?limit=200&ascending=true&count=true&page=" + Страница;			
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка организаций возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции 


Функция ИнформацияОСкладахONE_C(Страница)
	
	
	Метод  = "/api/warehouse/getWarehouses?service=ONE_C&limit=200&ascending=true&count=true&page=" + Страница;			
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка организаций возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИнформацияОСтокахТоваров(Вариант, Страница)
		
	Метод  = "/api/wms/findStock?limit=200&ascending=true&count=true&page=" + Страница;			
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка товаров возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура УстановитьОстатки(МассивТоваров) Экспорт
		
	Метод  = "/api/wms/changeStockByServiceWarehouse?service=ONE_C"; 
		
	json = Новый Структура;
	
	params = Новый Массив;
	
	Для каждого ТекСтр Из МассивТоваров Цикл
	
		СтруктураТовара = Новый Структура;     
		Если ЭтотОбъект.ТестовыйРежим Тогда
			СтруктураТовара.Вставить("serviceProductId", "5f61fdc6-88f4-11ee-b39e-a85e452bfd27"); 
		Иначе
			СтруктураТовара.Вставить("serviceProductId", Строка(ТекСтр.Номенклатура.УникальныйИдентификатор()));
		КонецЕсли;   
		СтруктураТовара.Вставить("serviceWarehouseId",Строка(ВыбСклад.УникальныйИдентификатор())); 		
		СтруктураТовара.Вставить("stock",	 ТекСтр.Остаток1С);
		params.Добавить(СтруктураТовара);
		
	КонецЦикла;
	
	json.Вставить("params", params);   
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Лев(ТекстЗапроса, 13), "");
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-3);
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 	
		Если Не РезультатЗапроса = Неопределено Тогда
			Сообщить("Остатки обновлены.");
		КонецЕсли;
	Исключение
		СообщитьОбОшибке("При установке остатков товаров возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСвязьСоСкладом(ТекСклад) Экспорт
		
	Метод  = "/api/warehouse/createServiceWarehouse"; 
	
	json = Новый Структура;  
	json.Вставить("name", ТекСклад.НаименованиеСклада); 
	json.Вставить("externalId", Строка(ТекСклад.Склад.УникальныйИдентификатор()));
	json.Вставить("warehouseId", ТекСклад.ID_SelSup); 
	json.Вставить("service", "ONE_C"); 
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Организация);
	Строки = ЭтотОбъект.Организации.НайтиСтроки(Отбор);
	Если Строки.Количество() > 0 Тогда
		json.Вставить("organizationId", Строки[0].ID_SelSup);
    КонецЕсли;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
		
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 
		Если Не РезультатЗапроса = Неопределено
			И ТекСклад.НаименованиеСклада = РезультатЗапроса.name Тогда
			Сообщить("Склады с наименованием """ + ТекСклад.НаименованиеСклада +""" связаны.");
		КонецЕсли;	
	Исключение
		СообщитьОбОшибке("При установке связи складов возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура Sleepy(ЗадержкаСекунд = 10) 
		
	Скрипт = Новый ТекстовыйДокумент(); 
	Скрипт.УстановитьТекст 
	( 
	"if (WScript.Arguments.Count()==0) 
	| WScript.Quit(); 
	|else 
	| if (isNaN(parseInt(WScript.Arguments(0)))) 
	| WScript.Quit(); 
	|WScript.Sleep(WScript.Arguments(0));" 
	); 
	Скрипт.Записать(КаталогВременныхФайлов()+"sleep.js", КодировкаТекста.ANSI); 
	WshShell = Новый COMОбъект("wscript.shell"); 
	WshShell.Run("wscript.exe """+КаталогВременныхФайлов()+"sleep.js"" "+Формат(ЗадержкаСекунд*1000,"ЧГ=0"), 0, -1); 
	УдалитьФайлы(КаталогВременныхФайлов()+"sleep.js");  
		
КонецПроцедуры
		
Процедура ОбновитьЭтикеткиЗаказов() Экспорт  
		
	Метод  = "/api/fbs/updateLabels";  
	
	ids = Новый Массив();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Заказы Цикл
		Если СтрокаТаблицы.Обработать 
			И ids.Найти(СтрокаТаблицы.IDЗаказа) = Неопределено Тогда
			ids.Добавить(СтрокаТаблицы.IDЗаказа);		
		КонецЕсли;		
	КонецЦикла; 
	
	Если ids.Количество() = 0 Тогда 
		СообщитьОбОшибке("Нет данных для обновления этикеток выбранных заказов. Заказы не выбраны.");
		Возврат;
	КонецЕсли;	
	
	json = Новый Структура;
	json.Вставить("ids", ids);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Лев(ТекстЗапроса, 10), "");
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-3);  
		
	Попытка
		
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST"); 
		Если Не РезультатЗапроса = Неопределено Тогда
			Сообщить("Этикетки заказов с маркетплейса обновлены.");
		КонецЕсли;
		
	Исключение
		СообщитьОбОшибке("Обновление этикеток заказов с маркетплейса по указанному фильтру возникла ошибка: " + ОписаниеОшибки()); 
	КонецПопытки;   
	
КонецПроцедуры  

Процедура ПечатьЗаказов() Экспорт  
		
	Метод  = "/api/fbs/downloadLabels";   
		
	ids = Новый Массив();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Заказы Цикл
		Если СтрокаТаблицы.Обработать 
			И ids.Найти(СтрокаТаблицы.IDЗаказа) = Неопределено Тогда
			ids.Добавить(СтрокаТаблицы.IDЗаказа);		
		КонецЕсли;		
	КонецЦикла; 
	
	Если ids.Количество() = 0 Тогда 
		СообщитьОбОшибке("Нет данных для печати этикеток выбранных заказов.");
		Возврат;
	КонецЕсли;	
	
	json = Новый Структура;
	json.Вставить("ids", ids);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, json);
	ТекстЗапроса = ЗаписьJSON.Закрыть();
	
	Попытка
		
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса, "POST");  
		
		Пока Истина Цикл   
			
			Sleepy(10);
			
			Метод  = "/api/task/getTask?filter=" + РезультатЗапроса.id; 
			
			РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
			Если РезультатЗапроса.status = "FINISHED" Тогда
				ЗагрузитьPDF(РезультатЗапроса.file);
				Прервать;
			ИначеЕсли РезультатЗапроса.status = "ERROR" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		СообщитьОбОшибке("При скачивании PDF файла со списком этикеток всех заказов по указанному фильтру возникла ошибка: " + ОписаниеОшибки()); 
	КонецПопытки;   
	
КонецПроцедуры  

Процедура ЗагрузитьPDF(ИмяФайла)  
	
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталог);
	
	Адрес = UrlSelSup + "/files/file?path=" + ИмяФайла;
	
	ПутьДляСохранения = ВременныйКаталог + ИмяФайла;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения); 	
	ЗагруженныйФайл = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	Если Не ЗагруженныйФайл.Статус Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
		ВызватьИсключение ЗагруженныйФайл.СообщениеОбОшибке;
	КонецЕсли;
	
	ЗапуститьПриложение(ЗагруженныйФайл.Путь);
	//ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
	
КонецПроцедуры  

Процедура ЗагрузитьКартинку(Адрес, ИмяФайла)  
	
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
	
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременныйКаталог);
	
	ПутьДляСохранения = ВременныйКаталог + ИмяФайла;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ПутьДляСохранения); 	
	ЗагруженныйФайл = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	Если Не ЗагруженныйФайл.Статус Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
		ВызватьИсключение ЗагруженныйФайл.СообщениеОбОшибке;
	КонецЕсли;
	
	//ЗапуститьПриложение(ЗагруженныйФайл.Путь);
	//ФайловаяСистема.УдалитьВременныйФайл(ВременныйКаталог);
	
КонецПроцедуры

Функция ОтправленияСоСкладаПродавца(Страница)
	
	СтатусОтправления0 = "CREATED";
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатусОтправления) Тогда		
		СтатусОтправления0 = "&status=" + ПолучитьСтатусОтправления();		
	КонецЕсли; 
		
	Маркетплейс0 = "";
	Если ЗначениеЗаполнено(ЭтотОбъект.Маркетплейс) Тогда		
		Маркетплейс0 = "&service=" + ЭтотОбъект.Маркетплейс;		
	КонецЕсли; 
	
	//&type=FBS
	Метод  = "/api/fbs/findOrder?" + СтатусОтправления0 + Маркетплейс0 + "&deliveryDate=" + Формат(ЭтотОбъект.ДатаДоставки, "ДФ=yyyy-MM-dd" ) + "&sortBy=CREATED&limit=500&ascending=true&count=true&page=" + Страница;
	
	Попытка
		РезультатЗапроса = ВыполнитьМетодSelSupAPI(Метод);
	Исключение
		СообщитьОбОшибке("При получении списка товаров возникла ошибка: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатЗапроса; 	
	
КонецФункции

Функция ВыполнитьМетодSelSupAPI(Метод, ТекстЗапроса = Неопределено, ТипЗапроса = "GET") Экспорт
	
	Сервер = UrlSelSup; 
	
	Заголовки = Новый Соответствие;
    Заголовки.Вставить("Host", 		    Сервер);
	Заголовки.Вставить("Authorization", ЭтотОбъект.ApiKey);
	Заголовки.Вставить("Content-type", 	"application/json");
	
	Запрос = Новый HTTPЗапрос(Метод, Заголовки);
	Если ТекстЗапроса <> Неопределено  Тогда // без тела запроса (параметров)
		Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);  // с телом запроса (параметров)
	КонецЕсли; 
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	//Соединение 	 		 = Новый HTTPСоединение(Сервер, , , , , , ЗащищенноеСоединение);
	Соединение 	 		 = Новый HTTPСоединение(Сервер, , , , , , );
		
	Если ТипЗапроса = "GET" Тогда
		Ответ = Соединение.Получить(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ТипЗапроса = "POST" Тогда 
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ТипЗапроса = "DELETE" Тогда 
		Ответ = Соединение.Удалить(Запрос);  
		СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	Иначе
		СтрокаОтвета = "Попытка использования нереализованного метода";
	КонецЕсли; 	
	
	Если Ответ.КодСостояния <> 200 Тогда
		СообщитьОбОшибке("Ошибка при подключении к API: " + СтрокаОтвета);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON, Ложь);
	
	Возврат СтруктураОтвета; 
	
КонецФункции
#КонецОбласти

#Область Заполнение1С

Процедура ЗаполнитьОстатки(СтрокаТЧ)
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда
		ЗаполнитьОстаткиУНФ(СтрокаТЧ);
	Иначе
		//ЗаполнитьОстаткиERP(СтрокаТЧ);
		ЗаполнитьОстаткиПоРаспределениюЗапасов(СтрокаТЧ);
	КонецЕсли
	
КонецПроцедуры

Процедура СоздатьНоменклатуру(СтрокаТЧ) Экспорт
		
	НовыйТовар=Справочники.Номенклатура.СоздатьЭлемент();
	НовыйТовар.НаименованиеПолное = СтрокаТЧ.НаименованиеТовара; 
	НовыйТовар.Наименование = СтрокаТЧ.НаименованиеТовара; 
	НовыйТовар.Артикул = СтрокаТЧ.Артикул;    
	НовыйТовар.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	НовыйТовар.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");  
	НовыйТовар.Качество = Перечисления.ГрадацииКачества.Новый;
	НовыйТовар.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию("шт"); 
	НовыйТовар.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Загрузка"); 
	НовыйТовар.ГруппаДоступа = Справочники.ГруппыДоступаНоменклатуры.НайтиПоНаименованию("Прочее");
	НовыйТовар.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	НовыйТовар.ИспользованиеХарактеристик = Ложь;
	
	
	Попытка
		
		НовыйТовар.Записать () ; // запишем новый наш товар  
		
		ШтрихКод = СтрокаТЧ.ШтрихКод; 
		
		Если Не ПустаяСтрока(ШтрихКод) Тогда
			
			НоваяЗапись = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			НоваяЗапись.Штрихкод = Штрихкод;
			НоваяЗапись.Номенклатура = НовыйТовар.Ссылка;
			//НоваяЗапись.Характеристика = Характеристика;
			
			НоваяЗапись.Записать(Истина); 
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = НовыйТовар.Ссылка;  
		
		Сообщить ("Cоздан товар: "+СтрокаТЧ.НаименованиеТовара+", артикул: "+СтрокаТЧ.Артикул); 
		
	Исключение   
		Сообщить ("Не создан товар: "+СтрокаТЧ.НаименованиеТовара+", артикул: "+СтрокаТЧ.Артикул + ". " + ОписаниеОшибки());  
	КонецПопытки; 
	
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуру(СтрокаТЧ, ЭтоЗаказ = Неопределено)  
	
	//Выборка = НайтиНоменклатуруERP(СтрокаТЧ);
	Если  ЭтоЗаказ = Истина тогда       
		Если ЗначениеЗаполнено(СтрокаТЧ.ШтрихКод) Тогда
			Выборка = НайтиНоменклатуруERPПоШтрихКоду(СтрокаТЧ.ШтрихКод, СтрокаТЧ, ЭтоЗаказ);   
			Если Выборка.Количество() = 0 Тогда 
				Выборка = НайтиНоменклатуруERPПоID(СтрокаТЧ.Артикул, СтрокаТЧ, ЭтоЗаказ); 
			КонецЕсли;
		Иначе
			Выборка = НайтиНоменклатуруERPПоID(СтрокаТЧ.Артикул, СтрокаТЧ, ЭтоЗаказ); 
		КонецЕсли;
	Иначе
		Выборка = НайтиНоменклатуруERPПоID(СтрокаТЧ.ID, СтрокаТЧ, ЭтоЗаказ);
	конецЕсли;
	Если Выборка.Количество() = 0 Тогда
		
		СтрокаТЧ.ЕстьОшибка 	= Истина;
		СтрокаТЧ.ОписаниеОшибки = "Товар не найден!";
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 1 Тогда
		
		СтрокаТЧ.ЕстьОшибка 	= Истина;
		СтрокаТЧ.ОписаниеОшибки = "Найдено несколько товаров с одинаковым идентификатором!";
		Возврат;
		
	КонецЕсли;
	
	Выборка.Следующий();
	
	СтрокаТЧ.Номенклатура = Выборка.Ссылка;
	
КонецПроцедуры

Функция НайтиНоменклатуруERP(СтрокаТЧ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &ID
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";
	
	Запрос.Текст = ТекстЗапроса;  	
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Артикул", "Номенклатура.Код"); 
		Запрос.УстановитьПараметр("ID", 			 СтрокаТЧ.Артикул);  
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);   				
	Иначе                
		Запрос.УстановитьПараметр("ID", 			 СтрокаТЧ.ID); 
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция НайтиНоменклатуруERPПоID(IDТовар, ВыбСтрока, ЭтоЗаказ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &ID
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";
	
	Запрос.Текст = ТекстЗапроса; 
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Артикул", "Номенклатура.Код"); 
		Запрос.УстановитьПараметр("ID", 			 IDТовар);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		
	Иначе
		Запрос.УстановитьПараметр("ID", 			IDТовар); 
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Если ЭтоЗаказ = Истина Тогда
			Сообщить ("Не найден товар: "+ВыбСтрока.НаименованиеТовара+", артикул: "+ВыбСтрока.Артикул);  //ВыбСтрока.ID
		Иначе
			Сообщить ("Не найден товар, артикул: "+ВыбСтрока.ID); 
		КонецЕсли;
		
		Возврат Выборка ; //Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;        	
	
КонецФункции  

Функция НайтиНоменклатуруERPПоШтрихКоду(ШтрихКодТовар, ВыбСтрока, ЭтоЗаказ)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Ссылка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И НЕ ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления
	|	И ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";    
 
	
	Запрос.Текст = ТекстЗапроса; 
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Артикул", "Номенклатура.Код"); 
		Запрос.УстановитьПараметр("ШтрихКод", 		ШтрихКодТовар);
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
		
	Иначе
		Запрос.УстановитьПараметр("ШтрихКод", 		 ШтрихКодТовар); 
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Если ЭтоЗаказ = Истина Тогда
			Сообщить ("Не найден товар: "+ВыбСтрока.НаименованиеТовара+", штрих-код: "+ВыбСтрока.ШтрихКод);  //ВыбСтрока.ШтрихКод
		Иначе
			Сообщить ("Не найден товар, штрих-код: "+ВыбСтрока.ШтрихКод); 
		КонецЕсли;
		
		Возврат Выборка ; //Справочники.Номенклатура.ПустаяСсылка();  
		
	КонецЕсли;        	
	
КонецФункции

Процедура ЗаполнитьОстаткиПоРаспределениюЗапасов(СтрокаТЧ)
	
	Если СтрокаТЧ.ЕстьОшибка
		И НЕ ЭтотОбъект.ТестовыйРежим Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК Количество,
	|	ЕСТЬNULL(СвободныеОстатки.Резерв, 0) КАК КоличествоРезерв1С
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|			СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
	|			СУММА(РаспределениеЗапасов.Свободно) КАК Свободно,
	|			СУММА(РаспределениеЗапасов.Резерв) КАК Резерв
	|		ИЗ
	|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ГДЕ
	|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|			И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И РаспределениеЗапасов.Склад = &Склад
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаспределениеЗапасов.Номенклатура) КАК СвободныеОстатки
	|		ПО СправочникНоменклатура.Ссылка = СвободныеОстатки.Номенклатура
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура";
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСклад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РаспределениеЗапасов.Склад = &Склад", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", 	 СтрокаТЧ.Номенклатура);
	Запрос.УстановитьПараметр("Склад",			 ЭтотОбъект.ВыбСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда		
		СтрокаТЧ.Остаток1С = Выборка.Количество;
		СтрокаТЧ.РазницаСвободный = СтрокаТЧ.ОстатокSelSup - СтрокаТЧ.Остаток1С; 
		СтрокаТЧ.РазницаСРезервом = (СтрокаТЧ.ОстатокSelSup+СтрокаТЧ.ОжидаетсяКПоставкеSelSup+СтрокаТЧ.ВРезервеSelSup) - (Выборка.Количество+Выборка.КоличествоРезерв1С); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиERP(СтрокаТЧ)
	
	Если СтрокаТЧ.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Набор.Номенклатура КАК Номенклатура,
	|	СУММА(Набор.ВНаличии) - СУММА(Набор.ВРезервеСоСклада) - СУММА(Набор.ВРезервеПодЗаказ) - СУММА(Набор.КОтгрузке) КАК Количество,
	|	СУММА(Набор.ВРезервеСоСклада) + СУММА(Набор.ВРезервеПодЗаказ) + СУММА(Набор.КОтгрузке) КАК КоличествоРезерв1С
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.ВНаличииОстаток КАК ВНаличии,
	|		Таблица.ВРезервеСоСкладаОстаток КАК ВРезервеСоСклада,
	|		Таблица.ВРезервеПодЗаказОстаток КАК ВРезервеПодЗаказ,
	|		0 КАК КОтгрузке
	|	ИЗ
	|		РегистрНакопления.СвободныеОстатки.Остатки(
	|				,
	|				Номенклатура = &Номенклатура
	|					И Склад = &Склад) КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.КОтгрузкеОстаток,
	|		0,
	|		0,
	|		Таблица.КОтгрузкеОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				,
	|				Номенклатура = &Номенклатура
	|					И Склад = &Склад) КАК Таблица) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура";
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСклад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Склад = &Склад", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", 	 СтрокаТЧ.Номенклатура);
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда 		
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);		
	Иначе
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);  
	КонецЕсли;
	
	//Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	Запрос.УстановитьПараметр("Склад",			 ЭтотОбъект.ВыбСклад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаТЧ.Остаток1С = Выборка.Количество;
		СтрокаТЧ.РазницаСвободный = СтрокаТЧ.ОстатокSelSup - СтрокаТЧ.Остаток1С; 
		СтрокаТЧ.РазницаСРезервом = (СтрокаТЧ.ОстатокSelSup+СтрокаТЧ.ОжидаетсяКПоставкеSelSup+СтрокаТЧ.ВРезервеSelSup) - (Выборка.Количество+Выборка.КоличествоРезерв1С); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиУНФ  (СтрокаТЧ)
	
	Если СтрокаТЧ.ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.ЗаказПокупателя КАК Заказ,
	|	ЗапасыОстатки.КоличествоОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ЗапасыОстатки.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Резерв1С,
	|	0 КАК ЗаказаноПокупателями,
	|	ЗапасыОстатки.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|				И Номенклатура = &Номенклатура
	|				И СтруктурнаяЕдиница = &Склад) КАК ЗапасыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяОстатки.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка),
	|	ЗаказПокупателяОстатки.Номенклатура,
	|	ЗаказПокупателяОстатки.Характеристика,
	|	ЗаказПокупателяОстатки.ЗаказПокупателя,
	|	0,
	|	0,
	|	ЗаказПокупателяОстатки.КоличествоОстаток,
	|	ЗаказПокупателяОстатки.Номенклатура.КатегорияНоменклатуры
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|				И Номенклатура = &Номенклатура) КАК ЗаказПокупателяОстатки";
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВыбСклад) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СтруктурнаяЕдиница = &Склад", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура", 	 СтрокаТЧ.Номенклатура);
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеНебольшойФирмой"  Тогда
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);		  
	Иначе
		Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Склад",			 ЭтотОбъект.ВыбСклад);   	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаТЧ.Остаток1С = Выборка.Количество;
		СтрокаТЧ.РазницаСвободный = СтрокаТЧ.ОстатокSelSup - СтрокаТЧ.Остаток1С; 
		СтрокаТЧ.РазницаСРезервом = (СтрокаТЧ.ОстатокSelSup+СтрокаТЧ.ОжидаетсяКПоставкеSelSup+СтрокаТЧ.ВРезервеSelSup) - (Выборка.Количество+Выборка.Резерв1С); 
	КонецЕсли;      
	
КонецПроцедуры	
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СообщитьОбОшибке(ТекстОшибки)
	
	Сообщить(ТекстОшибки);
	ЗаписьЖурналаРегистрации("ОбновитьОстаткиТоваровНаSelSup", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);	
	
КонецПроцедуры

Функция ПолучитьДатыДляМетода()
		
	ДатаНач = Формат(ЭтотОбъект.ДатаНачала, "ДФ=yyyy-MM-dd");
	ВремяНач =  Формат(ЭтотОбъект.ДатаНачала,"ДЛФ=T");
	
	ДатаКон = Формат(ЭтотОбъект.ДатаОкончания, "ДФ=yyyy-MM-dd");
	ВремяКон =  Формат(ЭтотОбъект.ДатаОкончания,"ДЛФ=T");    
	
	ДатаВремяНач = ДатаНач +"T"+ ВремяНач+".126Z"; //"2020-02-25T11:40:57.126Z"
	ДатаВремяКон = ДатаКон +"T"+ ВремяКон+".126Z";  
	
	СтруктураДатОтправки = Новый Структура("ДатаНачала, ДатаОкончания", ДатаВремяНач, ДатаВремяКон);
	
	Возврат  СтруктураДатОтправки;
	
КонецФункции 

Функция ПолучитьСтатусОтправления()
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатусОтправления) Тогда
		
		Если СтатусОтправления = "Новый" Тогда
			ИскомыйСтатус = "CREATED";
		ИначеЕсли СтатусОтправления = "Собран" Тогда
			ИскомыйСтатус = "COLLECTED";
		ИначеЕсли СтатусОтправления = "Отменен" Тогда
			ИскомыйСтатус = "REVOKED";
		ИначеЕсли СтатусОтправления = "Отменяется" Тогда
			ИскомыйСтатус = "REVOKING";   
		ИначеЕсли СтатусОтправления = "Выкуплен" Тогда
			ИскомыйСтатус = "FINISHED";			
		ИначеЕсли СтатусОтправления = "Спорный" Тогда
			ИскомыйСтатус = "CONTROVERSIAL";
		ИначеЕсли СтатусОтправления = "Сборка" Тогда
			ИскомыйСтатус = "COLLECTING";  			
		ИначеЕсли СтатусОтправления = "Отправлен" Тогда
			ИскомыйСтатус = "SEND";
		ИначеЕсли СтатусОтправления = "В пути" Тогда
			ИскомыйСтатус = "DELIVERY"; 
		ИначеЕсли СтатусОтправления = "Возврат" Тогда
			ИскомыйСтатус = "REFUND"; 
		ИначеЕсли СтатусОтправления = "Готов к выдаче" Тогда
			ИскомыйСтатус = "READY_FOR_PICKUP"; 
		ИначеЕсли СтатусОтправления = "Забрать возврат" Тогда
			ИскомыйСтатус = "PICK_UP_REFUND"; 
		ИначеЕсли СтатусОтправления = "На сборке" Тогда
			ИскомыйСтатус = "PACKING"; 
		ИначеЕсли СтатусОтправления = "Ожидает оплаты" Тогда
			ИскомыйСтатус = "PAYMENT_REQUIRED";
		ИначеЕсли СтатусОтправления = "Отменен покупателем" Тогда
			ИскомыйСтатус = "CANCELED"; 
		ИначеЕсли СтатусОтправления = "В закупке" Тогда
			ИскомыйСтатус = "WAITING_SUPPLY";
		Иначе
			ИскомыйСтатус = ""; 
			СообщитьОбОшибке("Статус отправления указан неверно!");			
		КонецЕсли;	
		
		Возврат  ИскомыйСтатус;
		
	Иначе
		//СообщитьОбОшибке("Не указан статус отправления!");
		Возврат ""; 
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаименованиеСтатуса(СтатусОтправления)
	
	Если ЗначениеЗаполнено(СтатусОтправления) Тогда  
		
		Если СтатусОтправления = "CREATED" Тогда
			ИскомыйСтатус = "Новый";
		ИначеЕсли СтатусОтправления = "COLLECTED" Тогда
			ИскомыйСтатус = "Собран";
		ИначеЕсли СтатусОтправления = "REVOKED" Тогда
			ИскомыйСтатус = "Отменен";
		ИначеЕсли СтатусОтправления = "REVOKING" Тогда
			ИскомыйСтатус = "Отменяется";   
		ИначеЕсли СтатусОтправления = "FINISHED" Тогда
			ИскомыйСтатус = "Выкуплен";			
		ИначеЕсли СтатусОтправления = "CONTROVERSIAL" Тогда
			ИскомыйСтатус = "Спорный";
		ИначеЕсли СтатусОтправления = "COLLECTING" Тогда
			ИскомыйСтатус = "Сборка";  			
		ИначеЕсли СтатусОтправления = "SEND" Тогда
			ИскомыйСтатус = "Отправлен";
		ИначеЕсли СтатусОтправления = "DELIVERY" Тогда
			ИскомыйСтатус = "В пути"; 
		ИначеЕсли СтатусОтправления = "REFUND" Тогда
			ИскомыйСтатус = "Возврат"; 
		ИначеЕсли СтатусОтправления = "READY_FOR_PICKUP" Тогда
			ИскомыйСтатус = "Готов к выдаче"; 
		ИначеЕсли СтатусОтправления = "PICK_UP_REFUND" Тогда
			ИскомыйСтатус = "Забрать возврат"; 
		ИначеЕсли СтатусОтправления = "PACKING" Тогда
			ИскомыйСтатус = "На сборке"; 
		ИначеЕсли СтатусОтправления = "PAYMENT_REQUIRED" Тогда
			ИскомыйСтатус = "Ожидает оплаты";
		ИначеЕсли СтатусОтправления = "CANCELED" Тогда
			ИскомыйСтатус = "Отменен покупателем"; 
		ИначеЕсли СтатусОтправления = "WAITING_SUPPLY" Тогда
			ИскомыйСтатус = "В закупке"; 			
		Иначе
			ИскомыйСтатус = ""; 
			СообщитьОбОшибке("Статус отправления указан неверно!");
			
		КонецЕсли;
		
		Возврат  ИскомыйСтатус;
	Иначе
		//СообщитьОбОшибке("Не указан статус отправления!");
		Возврат ""; 
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеВидимости(ВыбЗначение);
	
	ЗначениеEn = "";
	Если ВыбЗначение = "все товары" Тогда
		ЗначениеEn = "ALL";
	ИначеЕсли  ВыбЗначение = "товары, которые видны покупателям" Тогда
		ЗначениеEn = "VISIBLE";
	ИначеЕсли  ВыбЗначение = "товары, которые по какой-то из причин не видны покупателям" Тогда
		ЗначениеEn = "INVISIBLE";
	ИначеЕсли  ВыбЗначение = "товары, у которых не указано наличие" Тогда
		ЗначениеEn = "EMPTY_STOCK"; 		
	ИначеЕсли  ВыбЗначение = "товары, которым можно установить наличие" Тогда
		ЗначениеEn = "READY_TO_SUPPLY";
	ИначеЕсли  ВыбЗначение = "товары, создание которых завершилось ошибкой" Тогда
		ЗначениеEn = "STATE_FAILED";
	КонецЕсли;
	Возврат ЗначениеEn;
КонецФункции

Функция ПолучитьДатуОтвета(ВыбДата, ВариантДаты)
	
	Попытка
		НовД = СтрЗаменить(ВыбДата,"-","");  
		НовД = СтрЗаменить(НовД,"[","");
		НовД = СтрЗаменить(НовД,"U","");
		НовД = СтрЗаменить(НовД,"T","");
		НовД = СтрЗаменить(НовД,"Z",""); 
		НовД = СтрЗаменить(НовД,"C",""); 
		НовД = СтрЗаменить(НовД,"]","");
		НовД =СтрЗаменить(НовД,":","");
		НовД =СтрЗаменить(НовД,".","");
		НовД = Лев(НовД, 14);
		ДатаСоздания = Дата(СокрЛП(НовД));
		Возврат ДатаСоздания; 
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокЗаписи, СтатусЗаказа)
	
	Попытка
		если СтатусЗаказа = "отменено" Тогда
			ДокЗаписи.Записать(РежимЗаписиДокумента.Запись);
			ДокЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ДокЗаписи.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		Сообщить ("Записан документ: "+ ДокЗаписи);
	Исключение
		Сообщить ("Не удалось записать документ: "+ ДокЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

//Поиск документа Заказ покупателя (клиента) по реквизиту НомерПоДаннымКлиента
Функция НайтиЗаказПоНомеру(ВыбНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиента.Ссылка КАК ЗаказПокупателя,
	|	ЗаказКлиента.НомерВходящегоДокумента КАК НомерПоДаннымКлиента,
	|	ЗаказКлиента.Дата КАК Дата
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.НомерВходящегоДокумента = &НомерПоДаннымКлиента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Если ЭтотОбъект.ИмяМетаданных = "УправлениеТорговлей" Тогда
		ТекстЗапроса = Запрос.Текст;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ЗаказПокупателя", "Документ.ЗаказКлиента");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаказКлиента.НомерВходящегоДокумента", "ЗаказКлиента.НомерПоДаннымКлиента");  
		Запрос.Текст =  ТекстЗапроса;
		ПустойЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
	Иначе
		ПустойЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка(); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерПоДаннымКлиента", ВыбНомер);
	Выборка  = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Заказпокупателя;
	Иначе
		Возврат ПустойЗаказ; 
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДопРеквизитыУТ(ДокЗаказКлиента, ВыбСтрокаТовара, СтруктураДопСвойств, СтруктураДоп)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокЗаказКлиента.Ссылка);
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Если НЕ  Выборка.Следующий() Тогда // добавляем доп. реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.СтатусЗаказа);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоСтатус;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.СтатусЗаказа;
		
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.ПредельнаяДатаСборки);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоПредельнаяДатаСборки;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.ПредельнаяДатаСборки;    
		
	Иначе	// уже есть доп реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
		//	ТЧДопРеквизиты.Очистить();
		Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
			
			Если ТекР.Свойство.Имя = "статусSelSup" Тогда
				ТекР.Значение = ВыбСтрокаТовара.СтатусЗаказа;
			ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
				ТекР.Значение = ВыбСтрокаТовара.ПредельнаяДатаСборки;
				
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;
	//Заполним значение полученных доп. реквизитов для обработки в заказе
	ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
	Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
		
		Если ТекР.Свойство.Имя = "статусSelSup" Тогда
			СтруктураДоп.статусSelSup =ТекР.Значение ;
		ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
			СтруктураДоп.ПредельнаяДатаСборки =ТекР.Значение ; 				
		КонецЕсли;			
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьДопРеквизиты(ДокЗаказКлиента, ВыбСтрокаТовара, СтруктураДопСвойств, СтруктураДоп)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	
	Если ЭтотОбъект.ИмяМетаданных  = "УправлениеНебольшойФирмой" Тогда
		Запрос.Текст =  СтрЗаменить(Запрос.Текст, "Документ.ЗаказКлиента", "Документ.ЗаказПокупателя"); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокЗаказКлиента.Ссылка);
	Рез = Запрос.Выполнить();
	Выборка = Рез.Выбрать();
	Если НЕ  Выборка.Следующий() Тогда // добавляем доп. реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.СтатусЗаказа);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоСтатус;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.СтатусЗаказа;
		
		НоваяСтрока = ТЧДопРеквизиты.Добавить();
		НоваяСтрока.Значение = СокрЛП(ВыбСтрокаТовара.ПредельнаяДатаСборки);  		
		НоваяСтрока.Свойство = СтруктураДопСвойств.СвойствоПредельнаяДатаСборки;
		НоваяСтрока.ТекстоваяСтрока = ВыбСтрокаТовара.ПредельнаяДатаСборки;    
		
	Иначе	// уже есть доп реквизиты
		ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
	
		Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
			
			Если ТекР.Свойство.Имя = "статусSelSup" Тогда
				ТекР.Значение = ВыбСтрокаТовара.СтатусЗаказа;
			ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
				ТекР.Значение = ВыбСтрокаТовара.ПредельнаяДатаСборки;
				
			КонецЕсли;			
		КонецЦикла;		
	КонецЕсли;
	//Заполним значение полученных доп. реквизитов для обработки в заказе
	ТЧДопРеквизиты = ДокЗаказКлиента.ДополнительныеРеквизиты;
	Для Каждого ТекР ИЗ  ТЧДопРеквизиты Цикл
		
		Если ТекР.Свойство.Имя = "статусSelSup" Тогда
			СтруктураДоп.статусSelSup =ТекР.Значение ;
		ИначеЕсли  ТекР.Свойство.Имя = "ПредельнаяДатаСборки"  Тогда
			СтруктураДоп.ПредельнаяДатаСборки =ТекР.Значение ; 				
		КонецЕсли;			
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьЦенуТовара(СтрокаТовара)
	
	Товар = СтрокаТовара.Номенклатура;
	
	Если ЗначениеЗаполнено(Товар) Тогда
		
		Цена1С = 0; Цена = 0;
		ОтборС = Новый Структура("Номенклатура", Товар);
		ПоискЦены1С = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДата(), ОтборС);
		Если ПоискЦены1С.Количество() = 1 Тогда
			Цена1С = ПоискЦены1С.Получить(0).Цена;
		КонецЕсли;
		СтрокаТовара.Цена = Цена;
		СтрокаТовара.Цена1С = Цена1С;  
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти     

#Область СопоставлениеТоваров  
Функция НайтиПродуктыSelSup(ApiKey, TextQuery) Экспорт 
		
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера",	UrlSelSup);
	ПараметрыПодключения.Вставить("ApiKey",			ApiKey); 
	ПараметрыПодключения.Вставить("TextQuery",		TextQuery);
	
	КодОтвета = ПроверитьПодключениеКСерверуSelSup(ПараметрыПодключения);
	ТекстСообщения = ПолучитьТекстКодаОтвета(КодОтвета);
		
	//#Если Клиент Тогда
	Сообщить(ТекстСообщения); 
	//#КонецЕсли
	
	Если КодОтвета = 200 Тогда
			
		НоменклатураSelSup = ПоискПродуктовSelSup(ПараметрыПодключения);
		ТаблицаНоменклатурыSelSup = ЗаполнитьТаблицуНоменклатурыSelSup(НоменклатураSelSup);
		
		Если ТаблицаНоменклатурыSelSup.Количество() > 0 Тогда
			Возврат ТаблицаНоменклатурыSelSup;
		Иначе
			ТекстСообщения = "Товаров по запросу не обнаружено.";
			//Ошибка(Период, ТекстСообщения, "91");
			#Если Клиент Тогда
				Сообщить(ТекстСообщения);
			#КонецЕсли	
		КонецЕсли;
		
	КонецЕсли;

	Возврат Неопределено;	

КонецФункции   

Функция ОбработатьТаблицуНоменклатурыSelSup(ТаблицаНоменклатурыSelSup) Экспорт   
	
	//поиск по штрих-коду
	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.skuId КАК ЧИСЛО(10, 0)) КАК skuId,
	|	ТаблицаНоменклатурыSelSup.oneCId КАК oneCId,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.article КАК СТРОКА(20)) КАК article,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.name КАК СТРОКА(300)) КАК name,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыSelSup.barcode КАК СТРОКА(200)) КАК barcode
	|ПОМЕСТИТЬ ТаблицаНоменклатурыSelSup
	|ИЗ
	|	&ТаблицаНоменклатурыSelSup КАК ТаблицаНоменклатурыSelSup
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ТаблицаНоменклатурыSelSup.skuId КАК skuId,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) КАК oneCId
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыSelSup КАК ТаблицаНоменклатурыSelSup
	|		ПО (ТаблицаНоменклатурыSelSup.oneCId = &ПустойУникальныйИдентификатор
	|					И Номенклатура.Артикул = ТаблицаНоменклатурыSelSup.article
	|				ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) = ТаблицаНоменклатурыSelSup.oneCId)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура.Ссылка,
	|	ТаблицаНоменклатурыSelSup.skuId,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ШтрихкодыНоменклатуры.Номенклатура.Ссылка)
	|ИЗ
	|	ТаблицаНоменклатурыSelSup КАК ТаблицаНоменклатурыSelSup
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ТаблицаНоменклатурыSelSup.oneCId = &ПустойУникальныйИдентификатор)
	|			И ТаблицаНоменклатурыSelSup.barcode = ШтрихкодыНоменклатуры.Штрихкод";  
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыSelSup", ТаблицаНоменклатурыSelSup); 
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ЗаполнитьТаблицуНоменклатурыSelSup(НоменклатураSelSup) Экспорт
	
	
	//sku - Идентификатор товара в системе SelSup — SKU  
	//barcode - Штрихкод
	
	ТаблицаНоменклатурыSelSup = Новый ТаблицаЗначений();  
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("name", Новый ОписаниеТипов("Строка")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("skuId", Новый ОписаниеТипов("Число"));  
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("article", Новый ОписаниеТипов("Строка")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("ozonArticle", Новый ОписаниеТипов("Строка")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("barcode", Новый ОписаниеТипов("Строка"));   
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("organizationId", Новый ОписаниеТипов("Число"));   
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("oneCId", Новый ОписаниеТипов("УникальныйИдентификатор")); 
	ТаблицаНоменклатурыSelSup.Колонки.Добавить("mainImageUrl", Новый ОписаниеТипов("Строка"));
	
	Если НоменклатураSelSup.Количество() = 0 Тогда
		Возврат ТаблицаНоменклатурыSelSup;
	КонецЕсли;		
	
	i = 0;
	
	Пока i < НоменклатураSelSup.Количество() Цикл
			
		НоваяСтрока = ТаблицаНоменклатурыSelSup.Добавить(); 		
		НоваяСтрока.name           = НоменклатураSelSup[i].Получить("name");  
		НоваяСтрока.skuId          = НоменклатураSelSup[i].Получить("skuId"); 	
		НоваяСтрока.article        = НоменклатураSelSup[i]["view"]["model"]["article"];
		НоваяСтрока.ozonArticle    = НоменклатураSelSup[i].Получить("ozonArticle");  
		НоваяСтрока.organizationId = НоменклатураSelSup[i].Получить("organizationId"); 
		НоваяСтрока.mainImageUrl   = НоменклатураSelSup[i]["view"]["mainImageUrl"];
				
		oneCId = НоменклатураSelSup[i].Получить("oneCId"); 
		Если ЗначениеЗаполнено(oneCId) Тогда 
			НоваяСтрока.oneCId = Новый УникальныйИдентификатор(oneCId); 			
		КонецЕсли;	
		
		//плоская таблица штрих-кодов
		barcodes = НоменклатураSelSup[i].Получить("barcodes"); 
		j = 0;
		Для каждого ЭлементМассива Из barcodes Цикл  
			Если j = 0 Тогда
				НоваяСтрока.barcode = ЭлементМассива.Получить("barcode");   
			Иначе        
				ДублирующаяСтрока = ТаблицаНоменклатурыSelSup.Добавить(); 
				ЗаполнитьЗначенияСвойств(ДублирующаяСтрока, НоваяСтрока, , "barcode"); 
				ДублирующаяСтрока.barcode = ЭлементМассива.Получить("barcode");
			КонецЕсли;	
			j = j + 1;
		КонецЦикла;
		
		i = i + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатурыSelSup;
	
КонецФункции

Функция ПоискПродуктовSelSup(ПараметрыПодключения) Экспорт 
	
	Результат = Новый Массив;
	ТекстЗапроса = "/api/product/findProduct?query=" + ПараметрыПодключения.TextQuery;
		
	ПараметрыЗапроса = Новый Структура; 
	//ПараметрыЗапроса.Вставить("params", ПараметрыЗапросаQuery);
	
	ТелоЗапроса 		= ПреобразоватьДанныеВJSON(ПараметрыПодключения, ПараметрыЗапроса);
	РезультатЗапроса 	= ВыполнитьHTTPЗапрос("GET", ТекстЗапроса, ТелоЗапроса, ПараметрыПодключения, Ложь);
	
	Попытка 
		rows = РезультатЗапроса.Результат.Получить("rows");
	Исключение 
		rows = Неопределено;	
	КонецПопытки;
	
	Если ЗначениеЗаполнено(rows) Тогда
		ДополнитьМассив(Результат, rows);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ОбновитьМодельПродуктаSelSup(ApiKey, SkuId, OrganizationId, oneCId) Экспорт 
	
	ТекстЗапроса = "/api/product/updateProduct?merge=true&onlyProduct=true";
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера",	UrlSelSup);
	ПараметрыПодключения.Вставить("ApiKey",			ApiKey); 
	ПараметрыПодключения.Вставить("organizationId",	OrganizationId);
	ПараметрыПодключения.Вставить("id",		    	SkuId);
	ПараметрыПодключения.Вставить("oneCId",			Строка(oneCId));
	
	ПараметрыЗапросаParams = Новый Структура; 
	ПараметрыЗапросаParams.Вставить("merge", Истина); 
	ПараметрыЗапросаParams.Вставить("onlyProduct", Истина);   
	//ПараметрыЗапросаParams.Вставить("organizationId", ПараметрыПодключения.organizationId); 
	
	ПараметрыЗапроса = Новый Структура;   
	//ПараметрыЗапроса.Вставить("params", ПараметрыЗапросаParams);
	ПараметрыЗапроса.Вставить("id", ПараметрыПодключения.id);  
	ПараметрыЗапроса.Вставить("oneCId", ПараметрыПодключения.oneCId);
	ПараметрыЗапроса.Вставить("organizationId", ПараметрыПодключения.organizationId); 
	
	ТелоЗапроса 		= ПреобразоватьДанныеВJSON(ПараметрыПодключения, ПараметрыЗапроса);
	РезультатЗапроса 	= ВыполнитьHTTPЗапрос("POST", ТекстЗапроса, ТелоЗапроса, ПараметрыПодключения, Ложь);
	
	Возврат РезультатЗапроса.КодСостояния;
	
КонецФункции

Функция ВыполнитьHTTPЗапрос(ТипЗапроса, ТекстЗапроса, ТелоЗапроса, ПараметрыПодключения, ИспользоватьФункциюПреобразования = Истина)Экспорт
	
	
	Результат = Новый Соответствие;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Host", 		    ПараметрыПодключения.АдресСервера);
	Заголовки.Вставить("Authorization", ПараметрыПодключения.ApiKey);
	Заголовки.Вставить("Content-type", 	"application/json");
	
	Соединение 	= Новый HTTPСоединение(ПараметрыПодключения.АдресСервера, , , , , , );
    Запрос 		= Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ПерекодироватьСтроку(ТелоЗапроса), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		
		Если ТипЗапроса = "GET" Тогда
			РезультатЗапроса 	= Соединение.Получить(Запрос);
		ИначеЕсли ТипЗапроса = "POST" Тогда 
			РезультатЗапроса 	= Соединение.ОтправитьДляОбработки(Запрос);  
		ИначеЕсли ТипЗапроса = "DELETE" Тогда 
			РезультатЗапроса 	= Соединение.Удалить(Запрос);
		Иначе
			РезультатЗапроса = ПреобразоватьJSONВСоответствие(ПараметрыПодключения, "Попытка использования нереализованного метода", Ложь);
		КонецЕсли;     
		
		СтрокаОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		Если РезультатЗапроса.КодСостояния = 200 Тогда
			Результат = ПреобразоватьJSONВСоответствие(ПараметрыПодключения, СтрокаОтвета, ИспользоватьФункциюПреобразования);
			//SelSup_ЖурналРегистрацииВызовСервера.Информация("SelSupAPI", КомментарийЖурналаРегистрации(ПараметрыПодключения, ТекстЗапроса, ТелоЗапроса, РезультатЗапроса.КодСостояния, "Запрос выполнен успешно:"));
		Иначе
			Комментарий = КомментарийЖурналаРегистрации(ПараметрыПодключения, ТекстЗапроса, ТелоЗапроса, РезультатЗапроса.КодСостояния, "Во время получения данных с HTTP-сервера произошла ошибка:", СтрокаОтвета);
			////Ошибка(Период, Комментарий, ТелоЗапроса);
			//Ошибка(ПараметрыПодключения.Период, Комментарий,  РезультатЗапроса.КодСостояния);
			#Если Клиент Тогда
			Сообщить(Комментарий);
			#КонецЕсли
		КонецЕсли;

	Исключение
		Комментарий = КомментарийЖурналаРегистрации(ПараметрыПодключения, ТекстЗапроса, ТелоЗапроса, ,"Во время получения данных с HTTP-сервера произошла ошибка:", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		////Ошибка(Период, Комментарий, ТелоЗапроса);
		//Ошибка(ПараметрыПодключения.Период, Комментарий, РезультатЗапроса.КодСостояния);
		#Если Клиент Тогда
		Сообщить(Комментарий);
		#КонецЕсли
	КонецПопытки;
		
	РезультатHTTPЗапроса = Новый Структура();
	РезультатHTTPЗапроса.Вставить("Результат", Результат);
	РезультатHTTPЗапроса.Вставить("СтрокаОтвета", СтрокаОтвета); 
	РезультатHTTPЗапроса.Вставить("КодСостояния", РезультатЗапроса.КодСостояния);
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

Функция ПроверитьПодключениеКСерверуSelSup(ПараметрыПодключения) Экспорт 
	
	ТекстЗапроса = "/api/product/findProduct";
		
	ПараметрыЗапроса = Новый Структура; 
	ПараметрыЗапроса.Вставить("limit", 	1);
	
	ТелоЗапроса 		= ПреобразоватьДанныеВJSON(ПараметрыПодключения, ПараметрыЗапроса);
	РезультатЗапроса 	= ВыполнитьHTTPЗапрос("GET", ТекстЗапроса, ТелоЗапроса, ПараметрыПодключения, Ложь);
	
	Возврат РезультатЗапроса.КодСостояния;
	
КонецФункции

// Функция - Преобразовать данные в JSON
//
// Параметры:
//  Данные	 - Массив, Структура - произвольный объект
// 
// Возвращаемое значение:
//   - Строка - строка, в формате JSON
//
Функция ПреобразоватьДанныеВJSON(ПараметрыПодключения, Данные) Экспорт
	
	Результат = "";
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
		НастройкиСериализации = Новый НастройкиСериализацииJSON;
		НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализации);
		Результат = ЗаписьJSON.Закрыть();
	Исключение
		ИмяСобытия 	= "SelSupAPI.ПреобразоватьДанныеВJSON";
		Комментарий = "Не удалось записать JSON: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//Ошибка(ПараметрыПодключения.Период, ИмяСобытия + "; " + Комментарий, "SelSupAPIJSON");
		#Если Клиент Тогда
		Сообщить(ИмяСобытия + "; " + Комментарий);
		#КонецЕсли
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПерекодироватьСтроку(СтрокаКодирования, Кодировка = "UTF-16") Экспорт
    
    ТекстДляПерекодирования = Новый ТекстовыйДокумент;        
    ТекстДляПерекодирования.УстановитьТипФайла(Кодировка);
    ТекстДляПерекодирования.УстановитьТекст(СтрокаКодирования);
    
    Возврат ТекстДляПерекодирования.ПолучитьТекст();

КонецФункции

Функция КомментарийЖурналаРегистрации(Знач ПараметрыПодключения, ТекстЗапроса, ТелоЗапроса = "", КодСостояния = "", Заголовок = "", ПредставлениеОшибки = "")
	
	Результат = СтрШаблон("%1
		|АдресСервера: %2 
		|ТекстЗапроса: %3
		|Client-Id: %4
		|Api-Key/token: %5
		|ТелоЗапроса: %6
		|КодСостояния: %7
		|%8",
		Заголовок,
		ПараметрыПодключения.АдресСервера,
		ТекстЗапроса,
		//Формат(ПараметрыПодключения.ClientId,"ЧГ="),
		"ClientId",
		ПараметрыПодключения.ApiKey,
		ТелоЗапроса,
		КодСостояния,
		ПредставлениеОшибки);

	Возврат Результат;
	
КонецФункции

Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Преобразовать JSON в Соответствие
//
// Параметры:
//  JSON - Строка - строка, в формате JSON
// 
// Возвращаемое значение:
//   - Соответствие 
//
Функция ПреобразоватьJSONВСоответствие(ПараметрыПодключения, JSON, ИспользоватьФункциюПреобразования) Экспорт
	
	МассивСвойствДат = Новый Массив;
	МассивСвойствДат.Добавить("createdDate");

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(JSON);
		Если ИспользоватьФункциюПреобразования Тогда
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина,,, "ФункцияПреобразования", ЭтотОбъект,, МассивСвойствДат); 
		Иначе
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина); 
		КонецЕсли;	
		ЧтениеJSON.Закрыть();
	Исключение
		ИмяСобытия 	= "SelSupAPI.ПреобразоватьJSONВСоответствие";
		Комментарий = "Не удалось прочитать JSON: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//Ошибка(ПараметрыПодключения.Период, ИмяСобытия + "; " + Комментарий, "90");
		#Если Клиент Тогда
		Сообщить(ИмяСобытия + "; " + Комментарий);
		ДанныеJSON = Новый Структура("result", Новый Массив);
		#КонецЕсли
	КонецПопытки;	
	
	Возврат ДанныеJSON;
	
КонецФункции

Функция ПолучитьТекстКодаОтвета(КодОтвета) Экспорт 
	
	Если КодОтвета = 200 Тогда
		ТекстСообщения = "Доступ разрешен. Подключение прошло успешно.";
	ИначеЕсли КодОтвета = 400 Тогда
		ТекстСообщения = "Подключение не установлено. Проверьте параметры подключения 400.";
	ИначеЕсли КодОтвета = 403 Тогда
		ТекстСообщения = "Доступ к серверу запрещен. Не верно указаны параметры для подключения 404.";
	ИначеЕсли КодОтвета = 404 Тогда
		ТекстСообщения = "Подключение не установлено. Адрес сервера не найден 404. ";		
	ИначеЕсли КодОтвета = 409 Тогда
		ТекстСообщения = "Подключение не установлено. Конфликт запросов на подключение 409.";
	ИначеЕсли КодОтвета = 500 Тогда
		ТекстСообщения = "Подключение не установлено. Внутренняя ошибка сервера 500.";
	ИначеЕсли КодОтвета = 0 Тогда
		ТекстСообщения = "Подключение не установлено. Запрос не может быть выполнен.";		
	КонецЕсли; 
	
	Возврат ТекстСообщения;
	
КонецФункции	

Процедура ТестовоеПодключение(ApiKey) Экспорт 

		
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("АдресСервера",	UrlSelSup); 
	ПараметрыПодключения.Вставить("ApiKey",			ApiKey);
	
	КодОтвета = ПроверитьПодключениеКСерверуSelSup(ПараметрыПодключения);
	ТекстСообщения = ПолучитьТекстКодаОтвета(КодОтвета);
		
	//#Если Клиент Тогда
	Сообщить(ТекстСообщения); 
	//#КонецЕсли	
		

КонецПроцедуры   
#КонецОбласти         

//UrlSelSup = "api.selsup.ru "; 
UrlSelSup = "test.selsup-team.ru"; 


